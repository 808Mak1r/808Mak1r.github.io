<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>内网穿透--ABPTTS正向代理cs上线</title>
      <link href="/2021/01/04/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F--ABPTTS%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86cs%E4%B8%8A%E7%BA%BF/"/>
      <url>/2021/01/04/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F--ABPTTS%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86cs%E4%B8%8A%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="内网穿透–ABPTTS正向代理cs上线"><a href="#内网穿透–ABPTTS正向代理cs上线" class="headerlink" title="内网穿透–ABPTTS正向代理cs上线"></a>内网穿透–ABPTTS正向代理cs上线</h1><h2 id="内网穿透原理"><a href="#内网穿透原理" class="headerlink" title="内网穿透原理"></a>内网穿透原理</h2><p><strong>内网穿透是:利用各种隧道技术，以网络防火墙允许的协议，绕过网络防火墙的封锁，实现访问被封锁的目标网络。</strong></p><blockquote><p>隧道技术是一种通过使用互联网络的基础设施在网络之间传递数据的方式。使用隧道传递的数据(或负载)可以是不同协议的数据帧或包。隧道协议将这些其他协议的数据帧或包重新封装在新的包头中发送。新的包头提供了路由信息，从而使封装的负载数据能够通过互联网络传递。被封装的数据包在隧道的两个端点之间通过公共互联网络进行路由。被封装的数据包在公共互联网络上传递时所经过的逻辑路径称为隧道。一旦到达网络终点，数据将被解包并转发到最终目的地。注意隧道技术是指包括数据封装、传输和解包在内的全过程。</p></blockquote><p>我们进行内网渗透常用的隧道技术有dns隧道、http隧道、ssh隧道、icmp隧道等容易被网络防火墙放行的协议。</p><h2 id="内网穿透–应用层隧道工具"><a href="#内网穿透–应用层隧道工具" class="headerlink" title="内网穿透–应用层隧道工具"></a>内网穿透–应用层隧道工具</h2><p>由于应用层协议极多，对应的隧道工具也很多，我们常用来做隧道的协议一般是DNS、HTTP、SSH、SOCKS等</p><p><a href="https://github.com/nccgroup/ABPTTS">ABPTTS</a></p><p>TCP over HTTP,即通过HTTP隧道转发TCP连接,数据加密，可自定义HTTP数据，对抗特征检测十分优秀，创建的隧道十分稳定，比较遗憾的是支持的web脚本类型只有aspx和jsp</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python2编写</span></span><br><span class="line">pip install httplib2</span><br><span class="line">pip install pycrypto</span><br></pre></td></tr></table></figure><h2 id="内网实战–利用ABPTTS上线不出网的主机至cs"><a href="#内网实战–利用ABPTTS上线不出网的主机至cs" class="headerlink" title="内网实战–利用ABPTTS上线不出网的主机至cs"></a>内网实战–利用ABPTTS上线不出网的主机至cs</h2><p><strong>实战背景：</strong>获取了webshell的主机位于内网，并且该内网主机icmp等网络层协议不能出网，tcp和udp等传输层协议不能出网，dns、http等应用层协议也不能出网，唯一的数据通道是反向代理入网的web应用。</p><p><strong>方案设计</strong>：利用反向代理入网的web应用所在的HTTP连接，构建正向的<code>TCP over HTTP</code>隧道。通过这条隧道，我们可以向内网主机发起tcp连接。生成bind类型的payload，通过webshell上传执行就会监听一个端口，我们的远控平台通过构建的<code>TCP over HTTP</code>隧道，去连接监听的端口即可上线。<br>能构建<code>TCP over HTTP</code>的隧道的工具有<code>ABPTTS、Tunna、reDuh</code>等，由于<code>Tunna、reDuh</code>构建的tcp连接不稳定，这里选用<code>ABPTTS</code>。</p><h3 id="上线cs"><a href="#上线cs" class="headerlink" title="上线cs"></a>上线cs</h3><p><strong>由于cobaltstrike的bind类型的监听器仅有beacon TCP和beacon SMB，并且都必须连接到父beacon，无法直接连接cobalstrike服务端，所以我们需要一个父beacon来中转连接。</strong></p><ol><li>生成server脚本</li></ol><p><code>python abpttsfactory.py -o server</code></p><p>上传到web并在client执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python2 abpttsclient.py -c server/config.txt -u <span class="string">&quot;http://xx.com/tyu.jsp&quot;</span> -f <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">4444</span>/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">12344</span></span><br><span class="line"><span class="comment"># abptts客户端监听127.0.0.1:7777，通过http://192.168.168.121/abptts.aspx这个http隧道，将tcp连接127.0.0.1:7777转发到web服务器网络下的127.0.0.1:8888</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/25/vKbxtUHe8V496Ru.png" alt="image-20201105172524186.jpg">启动vps的cs server</p><p><code>./teamserver vpsip fuckbibi</code></p><ol start="2"><li>创建用来反向上线ab客户端的listener<img src="https://i.loli.net/2021/08/25/eW13sUMOYcXKioS.png" alt="image-20201105170031210.jpg"></li><li>生成父beacon<img src="https://i.loli.net/2021/08/25/cGYeORzNH4Cg5fX.png" alt="image-20201105170206527.jpg"></li><li>上传父beacon到ABPTTS客户端执行上线（其实就是上线你自己的攻击机）<img src="https://i.loli.net/2021/08/25/HvQhRNirxwmoDnk.png" alt="image-20201105170405974.jpg"></li><li>创建payload为tcp beacon的listener<img src="https://i.loli.net/2021/08/25/TBAgnRJfclXd9yP.png" alt="image-20201105170833874.jpg"></li><li>生成stageless的子beacon<img src="https://i.loli.net/2021/08/25/oPl1pCkRMynYiZ4.png" alt="image-20201105170943180.jpg"></li><li>将生成的子beacon通过webshell上传执行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 可以通过webshell查看网络监听，确保子beacon执行成功</span><br><span class="line">netstat -ano</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/08/25/vVRehkjSi7AMHQz.png" alt="image-20201105171346333.jpg"></li><li>在父beacon中连接abptts的监听ip和端口<br><code>connect 127.0.0.1:4444</code></li></ol><p><img src="https://i.loli.net/2021/08/25/5m14KRhPXbHykdt.png" alt="image-20201105174955855.jpg"></p><p><img src="https://i.loli.net/2021/08/25/P9Yo8gyBSlMtkEc.png" alt="image-20201105175021468.jpg"></p><p><img src="https://i.loli.net/2021/08/25/Rz7Dbvc9Aj1L6sB.png" alt="image-20201105175146916.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> 内网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
            <tag> CS </tag>
            
            <tag> 内网穿透 </tag>
            
            <tag> 正向代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>试着去理解虚拟DOM</title>
      <link href="/2019/08/20/%E8%AF%95%E7%9D%80%E5%8E%BB%E7%90%86%E8%A7%A3%E8%99%9A%E6%8B%9FDOM/"/>
      <url>/2019/08/20/%E8%AF%95%E7%9D%80%E5%8E%BB%E7%90%86%E8%A7%A3%E8%99%9A%E6%8B%9FDOM/</url>
      
        <content type="html"><![CDATA[<h2 id="去掉虚拟两个字，先了解下什么是DOM？"><a href="#去掉虚拟两个字，先了解下什么是DOM？" class="headerlink" title="去掉虚拟两个字，先了解下什么是DOM？"></a>去掉虚拟两个字，先了解下什么是DOM？</h2><blockquote><p>在原生JS中有DOM操作，就是使用浏览器提供的一些API，选中一个元素对它进行操作，比如说：增加一个属性、增加一个孩子、修改它里面的内容、改变它的位置，直接对DOM操作。这个DOM实际上对应的就是浏览器里面你所能看的见的对应的某个元素。</p></blockquote><h2 id="那什么是虚拟DOM"><a href="#那什么是虚拟DOM" class="headerlink" title="那什么是虚拟DOM"></a>那什么是虚拟DOM</h2><blockquote><p>假设我们要操作一个数据的报表，这个报表大概有几百条数据，我们要对这个报表进行一个排序的操作</p></blockquote><p>我们有这样一个表格，这里面大概有100多项<br> 姓名 | 年纪 | 分数 | 等等<br>——|——|——|——<br> 小红 | 12   | 44   |<br> 小花 | 13   | 78   |</p><ol><li>当我去点年纪的时候，希望年纪里的所有DOM元素可以按照年纪去排序，当我点新增的时候会在表格下面再新增一行数据，当我点击姓名的时候所有DOM按照姓名去做一个排序，我们可以想下用原生JS怎么去做排序，用JS去对DOM结构去排序，操作起来很难实现，也很麻烦。</li></ol><ol start="2"><li>后来我们有了MVVM框架可以对数据排序，数据对应到页面上的DOM结构，我们只需要对数据排序，那里面的DOM结构自然就排序了。</li></ol><ol start="3"><li>我们自己实现一个框架，假设数据变了，那我们的DOM结构也就变了，难道我们需要把数据重新渲染一次，如果用户频繁大量改动数据，DOM也会频繁改动，就会造成卡顿，那我们可以去做一些优化，怎么去做优化呢？</li></ol><ol start="4"><li>那我们可以像计算机内存那样，我们可以自己设定一个虚拟的数据结构，它是对真实的DOM结构是一一对应的，我们可以先对虚拟的数据结构进行操作，等全部操作完成了，再把它渲染成真实的DOM，那就变成了真实的数据。</li></ol><ul><li><strong>那这样做有什么好处呢？</strong></li></ul><blockquote><p>假设用户只做了微小的改动，比如增加了2条数据，那我们可以想打补丁一样，只把这两条加到真实的DOM里，而不用把整个DOM重新渲染。</p></blockquote><p>那这是虚拟DOM以及他的作用</p><p><strong>那虚拟DOM就是针对真实DOM做的一个一一映射的类似虚拟的数据结构，有了变化再把数据结构渲染到DOM里，做到局部的变化，实现行能优化。</strong></p><h2 id="那我们怎么实现它呢"><a href="#那我们怎么实现它呢" class="headerlink" title="那我们怎么实现它呢"></a>那我们怎么实现它呢</h2><ul><li>以下代码为将数据结构如何转化为虚拟DOM，然后将虚拟DOM渲染到页面中变成真正的DOM。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class VNode &#123;</span><br><span class="line">  constructor(tag, children, text) &#123;</span><br><span class="line">    this.tag = tag</span><br><span class="line">    this.text = text</span><br><span class="line">    this.children = children</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    if(this.tag === &#x27;#text&#x27;) &#123;</span><br><span class="line">      return document.createTextNode(this.text)</span><br><span class="line">    &#125;</span><br><span class="line">    let el = document.createElement(this.tag)</span><br><span class="line">    this.children.forEach(vChild =&gt; &#123;</span><br><span class="line">      el.appendChild(vChild.render())</span><br><span class="line">    &#125;)</span><br><span class="line">    return el</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function v(tag, children, text) &#123;</span><br><span class="line">  if(typeof children === &#x27;string&#x27;) &#123;</span><br><span class="line">    text = children</span><br><span class="line">    children = []</span><br><span class="line">  &#125;</span><br><span class="line">  return new VNode(tag, children, text)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">//虚拟的JSON格式的数据结构</span><br><span class="line">let nodesData = &#123;</span><br><span class="line">  tag: &#x27;div&#x27;,</span><br><span class="line">  children: [</span><br><span class="line">    &#123;</span><br><span class="line">      tag: &#x27;p&#x27;,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          tag: &#x27;span&#x27;,</span><br><span class="line">          children: [</span><br><span class="line">            &#123;</span><br><span class="line">              tag: &#x27;#text&#x27;,</span><br><span class="line">              text: &#x27;hi&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      tag: &#x27;span&#x27;,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            tag: &#x27;#text&#x27;,</span><br><span class="line">            text: &#x27;oo&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let vNodes = v(&#x27;div&#x27;, [</span><br><span class="line">      v(&#x27;p&#x27;, [</span><br><span class="line">        v(&#x27;span&#x27;, [ v(&#x27;#text&#x27;, &#x27;hi&#x27;) ] )</span><br><span class="line">        ]</span><br><span class="line">      ),</span><br><span class="line">      v(&#x27;span&#x27;, [</span><br><span class="line">        v(&#x27;#text&#x27;,  &#x27;oo&#x27;)</span><br><span class="line">        ])</span><br><span class="line">    ]</span><br><span class="line">  )</span><br><span class="line">console.log(vNodes.render())</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="什么是diff"><a href="#什么是diff" class="headerlink" title="什么是diff"></a>什么是diff</h2><p>我们需要做一些改变的时候，比如增删改查，那么我们需要将改变后的虚拟DOM树与真实的DOM树做对比，找出差异，然后做到局部更新改变的地方，那么找出差异就是diff（算法找两棵DOM树的差异）。</p><hr><p>以下代码为简单的实现 DOM diff </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">function patchElement(parent, newVNode, oldVNode, index = 0) &#123;</span><br><span class="line">  if(!oldVNode) &#123;</span><br><span class="line">    parent.appendChild(newVNode.render())</span><br><span class="line">  &#125; else if(!newVNode) &#123;</span><br><span class="line">    parent.removeChild(parent.childNodes[index])</span><br><span class="line">  &#125; else if(newVNode.tag !== oldVNode.tag || newVNode.text !== oldVNode.text) &#123;</span><br><span class="line">    parent.replaceChild(newVNode.render(), parent.childNodes[index])</span><br><span class="line">  &#125;  else &#123;</span><br><span class="line">    for(let i = 0; i &lt; newVNode.children.length || i &lt; oldVNode.children.length; i++) &#123;</span><br><span class="line">      patchElement(parent.childNodes[index], newVNode.children[i], oldVNode.children[i], i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let vNode1 = v(&#x27;div&#x27;, [</span><br><span class="line">      v(&#x27;p&#x27;, [</span><br><span class="line">        v(&#x27;span&#x27;, [ v(&#x27;#text&#x27;, &#x27;hi&#x27;) ] )</span><br><span class="line">        ]</span><br><span class="line">      ),</span><br><span class="line">      v(&#x27;span&#x27;, [</span><br><span class="line">        v(&#x27;#text&#x27;,  &#x27;oo&#x27;)</span><br><span class="line">        ])</span><br><span class="line">    ]</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">let vNode2 = v(&#x27;div&#x27;, [</span><br><span class="line">      v(&#x27;p&#x27;, [</span><br><span class="line">        v(&#x27;span&#x27;, [ </span><br><span class="line">          v(&#x27;#text&#x27;, &#x27;hi&#x27;) </span><br><span class="line">          ] )</span><br><span class="line">        ]</span><br><span class="line">      ),</span><br><span class="line">      v(&#x27;span&#x27;, [</span><br><span class="line">        v(&#x27;#text&#x27;,  &#x27;oo&#x27;),</span><br><span class="line">        v(&#x27;#text&#x27;,  &#x27;xx&#x27;)</span><br><span class="line">        ])</span><br><span class="line">    ]</span><br><span class="line">  )</span><br><span class="line">const root = document.querySelector(&#x27;#root&#x27;)</span><br><span class="line">patchElement(root, vNode1)</span><br><span class="line">patchElement(root, vNode1，vNode2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie是什么</title>
      <link href="/2019/07/05/Cookie%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>/2019/07/05/Cookie%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h1 id="维基百科定义"><a href="#维基百科定义" class="headerlink" title="维基百科定义"></a>维基百科定义</h1><p>Cookie（复数形态Cookies），又称为“小甜饼”。类型为“小型文本文件”[1]，指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。由网景公司的前雇员卢·蒙特利在1993年3月发明[2]。最初定义于RFC 2109。当前使用最广泛的 Cookie标准却不是RFC中定义的任何一个，而是在网景公司制定的标准上进行扩展后的产物。</p><h1 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h1><ol><li>Cookie就是用户登录网站，浏览器去访问服务器问这个人能不能登录，然后服务器传送给浏览器的一段数据。</li><li>浏览器会保留这段数据，不能随便删除（一般默认20分钟左右，浏览器不同具体时间不同）</li><li>然后这段时间内用户通过浏览器继续访问服务器，都必须带一个Cookie</li><li>Cookie 默认在用户关闭页面后就失效，后台代码可以任意设置 Cookie 的过期时间</li><li>大小大概在 4kb 以内</li></ol><h1 id="Cookie的特点"><a href="#Cookie的特点" class="headerlink" title="Cookie的特点"></a>Cookie的特点</h1><ol><li>服务器通过 Set-Cookie 响应头设置Cookie</li><li>浏览器得到Cookie之后，每次请求都要带上Cookie</li><li>服务器读取Cookie就知道登录用户的信息（用户名啥的）</li></ol><h1 id="如何使用-Cookie"><a href="#如何使用-Cookie" class="headerlink" title="如何使用 Cookie"></a>如何使用 Cookie</h1><p>Cookie 一般有两个作用。</p><h2 id="第一个作用是识别用户身份"><a href="#第一个作用是识别用户身份" class="headerlink" title="第一个作用是识别用户身份"></a>第一个作用是识别用户身份</h2><p>比如用户小红用浏览器访问了 <a href="http://qq.com,那么qq/">http://qq.com，那么qq</a> 的服务器就会立刻给小红返回一段数据就是Cookie。当 小红 再次访问qq的其他页面时，就会附带上这段数据。</p><p>同理有个小白用浏览器访问了 <a href="http://qq.com,那么qq/">http://qq.com，那么qq</a> 的服务器就会立刻给小白返回一段数据就是Cookie。当 小白 再次访问qq的其他页面时，就会附带上这段数据。</p><p>借此，<a href="http://qq.com/">http://qq.com</a> 的服务器就能区分 小白和 小红 两个用户了。</p><h2 id="第二个作用是记录历史"><a href="#第二个作用是记录历史" class="headerlink" title="第二个作用是记录历史"></a>第二个作用是记录历史</h2><p><a href="http://taobao.com/">http://taobao.com</a> 是一个购物网站，当 小红 在上面将商品 白鞋 、酱油 加入购物车时，JS 可以改写 Cookie，在Cookie中添加两个商品的信息，表示购物车里有 白鞋 和 酱油 两样商品了。</p><p>这样一来，当用户关闭网页，过三天再打开网页的时候，依然可以看到 白鞋、酱油 躺在购物车里，因为浏览器并不会无缘无故地删除这个 Cookie。</p><p>借此，就达到里记录用户操作历史的目的了。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS高级基础知识小结</title>
      <link href="/2019/06/29/JS%E9%AB%98%E7%BA%A7%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93/"/>
      <url>/2019/06/29/JS%E9%AB%98%E7%BA%A7%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var object = &#123;&#125;</span><br><span class="line">object.__proto__ ===  Object.prototype  // 为 true</span><br><span class="line"></span><br><span class="line">var fn = function()&#123;&#125;</span><br><span class="line">fn.__proto__ === Function.prototype  // 为 true</span><br><span class="line">fn.__proto__.__proto__ === Object.prototype // 为 true</span><br><span class="line"></span><br><span class="line">var array = []</span><br><span class="line">array.__proto__ === Array.prototype // 为 true</span><br><span class="line">array.__proto__.__proto__ === Object.prototype // 为 true</span><br><span class="line"></span><br><span class="line">Function.__proto__ === Function.prototype // 为 true</span><br><span class="line">Array.__proto__ === Function.prototype // 为 true</span><br><span class="line">Object.__proto__ === Function.prototype // 为 true</span><br><span class="line"></span><br><span class="line">true.__proto__ === Boolean.prototype // 为 true</span><br><span class="line"></span><br><span class="line">Function.prototype.__proto__ === Object.prototype // 为 true</span><br></pre></td></tr></table></figure><h1 id="面向对象new与this"><a href="#面向对象new与this" class="headerlink" title="面向对象new与this"></a>面向对象new与this</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fn()&#123;</span><br><span class="line">    console.log(this)</span><br><span class="line">&#125;</span><br><span class="line">new fn()</span><br></pre></td></tr></table></figure><p>new fn() 会执行 fn，并打印出 this，请问这个 this 有哪些属性？这个 this 的原型有哪些属性？</p><ul><li>this 自身没有属性（只有一个隐藏的 <strong>proto</strong> 属性）</li><li>this 的原型是 fn.prototype，只有一个属性 constructor，且 constructor === fn（另外还有一个隐藏属性 __proto__，指向 Object.prototype</li></ul><h1 id="JSON与JavaScript"><a href="#JSON与JavaScript" class="headerlink" title="JSON与JavaScript"></a>JSON与JavaScript</h1><h2 id="JSON-和-JavaScript-是什么关系"><a href="#JSON-和-JavaScript-是什么关系" class="headerlink" title="JSON 和 JavaScript 是什么关系?"></a>JSON 和 JavaScript 是什么关系?</h2><p>关系：JSON 是一门抄袭/借鉴 JavaScript 的语言，同时也是一种数据交互格式，JSON 是 JavaScript 的子集（或者说 JSON 只抄袭了一部分 JavaScript 语法，而且没有新增任何原创的语法）</p><h2 id="JSON-和-JavaScript-的区别有哪些？"><a href="#JSON-和-JavaScript-的区别有哪些？" class="headerlink" title="JSON 和 JavaScript 的区别有哪些？"></a>JSON 和 JavaScript 的区别有哪些？</h2><p>区别：JSON 不支持函数、undefined、变量、引用、单引号字符串、对象的key不支持单引号也不支持不加引号、没有内置的 Date、Math、RegExp 等。<br>而 JavaScript 全都支持。</p><h1 id="前端MVC"><a href="#前端MVC" class="headerlink" title="前端MVC"></a>前端MVC</h1><h2 id="前端-MVC-是什么？"><a href="#前端-MVC-是什么？" class="headerlink" title="前端 MVC 是什么？"></a>前端 MVC 是什么？</h2><ul><li>MVC 是一种设计模式（或者软件架构），把系统分为三层：Model数据、View视图和Controller控制器。</li><li>Model 数据管理，包括数据逻辑、数据请求、数据存储等功能。前端 Model 主要负责 AJAX 请求或者 LocalStorage 存储</li><li>View 负责用户界面，前端 View 主要负责 HTML 渲染。</li><li>Controller 负责处理 View 的事件，并更新 Model；也负责监听 Model 的变化，并更新 View，Controller 控制其他的所有流程。</li></ul><h2 id="MVC-三个对象分别有哪些重要属性和方法"><a href="#MVC-三个对象分别有哪些重要属性和方法" class="headerlink" title="MVC 三个对象分别有哪些重要属性和方法"></a>MVC 三个对象分别有哪些重要属性和方法</h2><ul><li>代码1-将MVC分别存为3个基础文件将共有的属性放进去Model.js,View.js,Controller.js<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">window.Controller = function(options)&#123;</span><br><span class="line">  var init = options.init</span><br><span class="line">  let object = &#123;</span><br><span class="line">    view: null,</span><br><span class="line">    model: null,</span><br><span class="line">    init: function (view, model) &#123;</span><br><span class="line">      this.view = view</span><br><span class="line">      this.model = model</span><br><span class="line">      this.model.init()</span><br><span class="line">      init.call(this, view, model)</span><br><span class="line">      options.bindEvents.call(this)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  for(let key in options)&#123;</span><br><span class="line">    if(key !== &#x27;init&#x27;)&#123;</span><br><span class="line">      object[key] = options[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return object</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">window.Model = function(options) &#123;</span><br><span class="line">  let resourceName = options.resourceName</span><br><span class="line">  return&#123;</span><br><span class="line">    init: function () &#123;</span><br><span class="line">      var APP_ID = &#x27;&#x27;;</span><br><span class="line">      var APP_KEY = &#x27;&#x27;;</span><br><span class="line">      AV.init(&#123;</span><br><span class="line">        appId: APP_ID,</span><br><span class="line">        appKey: APP_KEY</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    //获取数据</span><br><span class="line">    fetch: function () &#123;</span><br><span class="line">      var query = new AV.Query(resourceName);</span><br><span class="line">      return query.find() //Promise对象</span><br><span class="line">    &#125;,</span><br><span class="line">    //创建数据</span><br><span class="line">    save: function (object) &#123;</span><br><span class="line">      var X = AV.Object.extend(resourceName);</span><br><span class="line">      var x = new X();</span><br><span class="line">      return x.save(object)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">window.View = function(selector)&#123;</span><br><span class="line">  return document.querySelector(selector)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>代码2-每个模块自己独有的MVC<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var model = &#123;</span><br><span class="line">    data: null,</span><br><span class="line">    init()&#123;&#125;</span><br><span class="line">    fetch()&#123;&#125;</span><br><span class="line">    save()&#123;&#125;</span><br><span class="line">    update()&#123;&#125;</span><br><span class="line">    delete()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">view = &#123;</span><br><span class="line">    init() &#123;&#125;</span><br><span class="line">    template: &#x27;&lt;h1&gt;hi&lt;/h1&#x27;&gt;</span><br><span class="line">&#125;</span><br><span class="line">controller = &#123;</span><br><span class="line">    view: null,</span><br><span class="line">    model: null,</span><br><span class="line">    init(view, model)&#123;</span><br><span class="line">        this.view = view</span><br><span class="line">        this.model = model</span><br><span class="line">        this.bindEvents()</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        this.view.querySelector(&#x27;name&#x27;).innerText = this.model.data.name</span><br><span class="line">    &#125;,</span><br><span class="line">    bindEvents()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="在-ES5-中如何用函数模拟一个类"><a href="#在-ES5-中如何用函数模拟一个类" class="headerlink" title="在 ES5 中如何用函数模拟一个类"></a>在 ES5 中如何用函数模拟一个类</h1><p>ES 5 没有 class 关键字，所以只能使用函数来模拟类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function Human(name)&#123;</span><br><span class="line">    this.name = name</span><br><span class="line">&#125;</span><br><span class="line">Human.prototype.run = function()&#123;&#125;</span><br><span class="line"></span><br><span class="line">var person = new Human(&#x27;qq&#x27;)</span><br></pre></td></tr></table></figure><h1 id="Promise相关"><a href="#Promise相关" class="headerlink" title="Promise相关"></a>Promise相关</h1><p>jQuery 或者 axios 的 AJAX 功能，都返回的是 Promise 对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;url:&#x27;/xxx&#x27;, method:&#x27;get&#x27;&#125;).then(success1, error1).then(success2, error2)</span><br></pre></td></tr></table></figure><p>如果我自己创建 Promise 对象，我会这么写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function asyncMethod()&#123;</span><br><span class="line">    return new Promise(function (resolve, reject)&#123;</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            成功则调用 resolve</span><br><span class="line">            失败则调用 reject</span><br><span class="line">        &#125;,3000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识小结</title>
      <link href="/2019/06/06/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93/"/>
      <url>/2019/06/06/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="请写出一个符合-W3C-规范的-HTML-文件"><a href="#请写出一个符合-W3C-规范的-HTML-文件" class="headerlink" title="请写出一个符合 W3C 规范的 HTML 文件"></a>请写出一个符合 W3C 规范的 HTML 文件</h1><p>要求</p><p>页面标题为「我的页面」</p><p>页面中引入了一个外部 CSS 文件，文件路径为 /style.css</p><p>页面中引入了另一个外部 CSS 文件，路径为</p><p>/print.css，该文件仅在打印时生效</p><p>页面中引入了另一个外部 CSS 文件，路径为</p><p>/mobile.css，该文件仅在设备宽度小于 500 像素时生效</p><p>页面中引入了一个外部 JS 文件，路径为 /main.js</p><p>页面中引入了一个外部 JS 文件，路径为 /gbk.js，文件编码为 GBK</p><p>页面中有一个 SVG 标签，SVG 里面有一个直径为 100 像素的圆圈，颜色随意<br>注意题目中的路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;我的页面&lt;/title&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot;&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;/print.css&quot; media=&quot;print&quot;&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;/mobile.css&quot; media=&quot;(max-width: 500px)&quot;&gt;</span><br><span class="line">  &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    *&#123;</span><br><span class="line">        padding: 0;</span><br><span class="line">        margin: 0;</span><br><span class="line">     &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;svg&gt;</span><br><span class="line">    &lt;circle cx=&quot;100&quot; cy=&quot;100&quot; r=&quot;50&quot; fill=&quot;black&quot;&gt;</span><br><span class="line">  &lt;/svg&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;./main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;./gbk.js&quot; charset=&quot;GBK&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="移动端是怎么做适配的？"><a href="#移动端是怎么做适配的？" class="headerlink" title="移动端是怎么做适配的？"></a>移动端是怎么做适配的？</h1><p>回答要点：</p><p>meta viewport</p><p>媒体查询</p><p>动态 rem 方案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">1.meta viewport</span><br><span class="line">在head标签内部加上这段代码</span><br><span class="line"></span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br><span class="line">该meta标签的作用是让当前viewport的宽度等于设备的宽度，同时不允许用户手动缩放。也许允不允许用户缩放不同的网站有不同的要求，但让viewport的宽度等于设备的宽度。</span><br><span class="line">width=device-width: 让当前viewport宽度等于设备的宽度</span><br><span class="line">user-scalable=no: 禁止用户缩放</span><br><span class="line">initial-scale=1.0: 设置页面的初始缩放值为不缩放</span><br><span class="line">maximum-scale=1.0: 允许用户的最大缩放值为1.0</span><br><span class="line">minimum-scale=1.0: 允许用户的最小缩放值为1.0</span><br><span class="line">2.媒体查询</span><br><span class="line"></span><br><span class="line">@media （）and（）&#123;&#125;</span><br><span class="line">//满足（）里的条件，就执行大括号里css的样式</span><br><span class="line">&lt;style&gt;</span><br><span class="line">@media (max-width:320px)&#123;</span><br><span class="line">    body&#123;</span><br><span class="line">        background: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">当最大宽度分辨率满足，就生效这个红色背景的CSS样式</span><br><span class="line">3.动态 rem 方案</span><br><span class="line">1rem等于根元素html的font-size的值，那么可以调整根元素的font-size值来调整页面缩放后的各个元素的尺寸和定位。</span><br><span class="line"></span><br><span class="line">在script标签加入这段代码：</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">   var pageWidth=window.innerWidth  //获取屏幕宽度</span><br><span class="line">   document.documentElement.style.fontSize= `$&#123;pageWidth/60&#125;px`</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">此处，fontSizede的值为屏幕宽的十分之一，那么在写CSS的时候可以这样写：</span><br><span class="line"></span><br><span class="line">.xxx&#123;</span><br><span class="line">    width:0.4rem;</span><br><span class="line">    height:0.2rem;</span><br><span class="line">    margin:0.05rem 0.05rem;</span><br><span class="line">    float:left;</span><br><span class="line"> &#125;</span><br><span class="line">用sass将px转化为rem：</span><br><span class="line"></span><br><span class="line">@function px( $px )&#123;</span><br><span class="line">  @return $px/$designWidth*10 + rem;</span><br><span class="line">&#125;</span><br><span class="line">$designWidth: 320px; </span><br><span class="line"></span><br><span class="line">那么1rem=32px</span><br></pre></td></tr></table></figure><h1 id="用过CSS3吗-实现圆角矩形和阴影怎么做"><a href="#用过CSS3吗-实现圆角矩形和阴影怎么做" class="headerlink" title="用过CSS3吗? 实现圆角矩形和阴影怎么做?"></a>用过CSS3吗? 实现圆角矩形和阴影怎么做?</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">用过CSS3。</span><br><span class="line">1.实现圆角</span><br><span class="line">实现圆角矩形</span><br><span class="line">使用 border-radius 属性：</span><br><span class="line"></span><br><span class="line">border-radius: 6px;</span><br><span class="line">当使用一个半径时确定一个圆形；当使用两个半径时确定一个椭圆，这个(椭)圆与边框的交集形成圆角效果。</span><br><span class="line">取值：</span><br><span class="line"></span><br><span class="line">用 px 等 css 长度单位值来定义圆形半径或椭圆的半长轴，半短轴。不能用负值。</span><br><span class="line">使用百分数定义圆形半径或椭圆的半长轴，半短轴。水平半轴相对于盒模型的宽度；垂直半轴相对于盒模型的高度。不能用负值。</span><br><span class="line">border-radius 属性又可以细分为以下 4 个属性，从左上角开始，逆时针依次为：</span><br><span class="line"></span><br><span class="line">border-top-left-radius</span><br><span class="line">border-top-right-radius</span><br><span class="line">border-bottom-right-radius</span><br><span class="line">border-bottom-left-radius</span><br><span class="line">因此，可以为四个角各自单独设置，也可以用简写的 border-radius 属性一起设置。</span><br><span class="line"></span><br><span class="line">border-radius: 6px;</span><br><span class="line"></span><br><span class="line">/* 相当于 */</span><br><span class="line"></span><br><span class="line">border-top-left-radius: 6px;</span><br><span class="line">border-top-right-radius: 6px;</span><br><span class="line">border-bottom-right-radius: 6px;</span><br><span class="line">border-bottom-left-radius: 6px;</span><br><span class="line">和其他简写属性类似，无法为个别值设定为继承，如 border-radius:0 0 inherit inherit，这会覆盖一部分现有定义。在这种情况下只能使用完整属性来指定。</span><br><span class="line">2.阴影</span><br><span class="line">有两种属性可以先实现阴影：</span><br><span class="line"></span><br><span class="line">box-shadow 属性和 text-shadow 属性</span><br><span class="line"></span><br><span class="line">使用 box-shadow 属性：</span><br><span class="line">box-shadow: inset 2px 2px 2px 1px red;</span><br><span class="line">会生成一个在边框内，水平、竖直偏移量均为 2px，模糊半径为 2px，同时阴影会扩大 1px 的红色阴影。</span><br><span class="line">box-shadow使用一个或多个投影，如果使用多个投影时必须需要用逗号“，”分开。</span><br><span class="line">对象选择器 &#123;box-shadow:inset x-offset y-offset blur-radius spread-radius color&#125;</span><br><span class="line">对象选择器 &#123;box-shadow:投影方式 X轴偏移量 Y轴偏移量 阴影模糊半径 阴影扩展半径 阴影颜色&#125;</span><br><span class="line">为文字添加阴影可以用 text-shadow 属性：</span><br><span class="line">text-shadow: 2px 2px 2px red;</span><br><span class="line">会生成一个水平、竖直偏移量均为 2px，模糊半径为 2px 的红色阴影。</span><br><span class="line">两个属性都可以有多组阴影值，多组阴影值之间用逗号相隔；多个阴影时会从前往后叠加，第一个阴影在最上面。</span><br></pre></td></tr></table></figure><h1 id="什么是闭包，闭包的用途是什么？"><a href="#什么是闭包，闭包的用途是什么？" class="headerlink" title="什么是闭包，闭包的用途是什么？"></a>什么是闭包，闭包的用途是什么？</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">1.什么是闭包？</span><br><span class="line"></span><br><span class="line">function f1()&#123;</span><br><span class="line">    var n=999;</span><br><span class="line">    function f2()&#123;</span><br><span class="line">　      alert(n); </span><br><span class="line">　　　　&#125;</span><br><span class="line">　　　　return f2;</span><br><span class="line">　　&#125;</span><br><span class="line">上面代码中的f2函数，就是闭包。</span><br><span class="line"></span><br><span class="line">闭包就是能够读取其他函数内部变量的函数。</span><br><span class="line"></span><br><span class="line">由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成&quot;定义在一个函数内部的函数&quot;。</span><br><span class="line"></span><br><span class="line">所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</span><br><span class="line">2.闭包的用途是什么？</span><br><span class="line">用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。</span><br><span class="line"></span><br><span class="line">function f1() &#123;</span><br><span class="line"></span><br><span class="line">  var n = 999;</span><br><span class="line"></span><br><span class="line">  nAdd = function () &#123;</span><br><span class="line">    n += 1</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function f2() &#123;</span><br><span class="line">    alert(n);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return f2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var result = f1();</span><br><span class="line"></span><br><span class="line">result(); // 999</span><br><span class="line"></span><br><span class="line">nAdd();</span><br><span class="line"></span><br><span class="line">result(); // 1000</span><br><span class="line">在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。</span><br><span class="line"></span><br><span class="line">为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</span><br></pre></td></tr></table></figure><h1 id="call、apply、bind-的用法分别是什么？"><a href="#call、apply、bind-的用法分别是什么？" class="headerlink" title="call、apply、bind 的用法分别是什么？"></a>call、apply、bind 的用法分别是什么？</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">apply()、call()和bind()方法都是Function.prototype对象中的方法，而所有的函数都是Function的实例。三者都可以改变this的指向，将函数绑定到上下文中。</span><br><span class="line">apply() 方法调用一个函数, 其具有一个指定的this值，以及作为一个数组（或类似数组的对象）提供的参数。 语法 func.apply(thisArg, [argsArray])</span><br><span class="line">call() 方法调用一个函数, 其具有一个指定的this值和分别地提供的参数(参数的列表)。 语法 fun.call(thisArg, arg1, arg2, ...)</span><br><span class="line">bind()方法创建一个新的函数, 当被调用时，将其this关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。 语法 fun.bind(thisArg, 队列or数组)()</span><br><span class="line">这三个方法的用法非常相似，将函数绑定到上下文中，即用来改变函数中this的指向。</span><br><span class="line">function add(a,b)&#123;</span><br><span class="line">  return a+b;</span><br><span class="line">&#125;</span><br><span class="line">add.call(add, 5, 3); //8</span><br><span class="line">add.apply(add, [5, 3]); //8</span><br><span class="line">bind：bind 接受的参数跟 call 一致，只是 bind 不会立即调用，它会生成一个新的函数，你想什么时候调就什么时候调。如下代码：</span><br><span class="line">function add(a, b)&#123;</span><br><span class="line">  return a+b;</span><br><span class="line">&#125;</span><br><span class="line">var foo1 = add.bind(add, 5,3); </span><br><span class="line">foo1(); //8</span><br><span class="line">var foo1 = add.bind(add, 5,3); </span><br><span class="line">foo1(); //8</span><br></pre></td></tr></table></figure><h1 id="请说出至少-8-个-HTTP-状态码，并描述各状态码的意义。"><a href="#请说出至少-8-个-HTTP-状态码，并描述各状态码的意义。" class="headerlink" title="请说出至少 8 个 HTTP 状态码，并描述各状态码的意义。"></a>请说出至少 8 个 HTTP 状态码，并描述各状态码的意义。</h1><p>例如：</p><p>状态码 200 表示响应成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">1xx(临时响应)表示临时响应并需要请求者继续执行操作的状态代码。</span><br><span class="line">100 (继续) 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</span><br><span class="line"></span><br><span class="line">101 (切换协议) 请求者已要求服务器切换协议，服务器已确认并准备切换。</span><br><span class="line"></span><br><span class="line">2xx (成功)表示成功处理了请求的状态代码。</span><br><span class="line">200 (成功) 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。</span><br><span class="line"></span><br><span class="line">201 (已创建) 请求成功并且服务器创建了新的资源。</span><br><span class="line"></span><br><span class="line">202 (已接受) 服务器已接受请求，但尚未处理。</span><br><span class="line"></span><br><span class="line">203 (非授权信息) 服务器已成功处理了请求，但返回的信息可能来自另一来源。</span><br><span class="line"></span><br><span class="line">204 (无内容) 服务器成功处理了请求，但没有返回任何内容。</span><br><span class="line"></span><br><span class="line">205 (重置内容) 服务器成功处理了请求，但没有返回任何内容。</span><br><span class="line"></span><br><span class="line">206 (部分内容) 服务器成功处理了部分 GET 请求。</span><br><span class="line"></span><br><span class="line">3xx (重定向) 表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</span><br><span class="line">300 (多种选择) 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</span><br><span class="line"></span><br><span class="line">301 (永久移动) 请求的网页已永久移动到新位置。 服务器返回此响应(对 GET 或 HEAD 请求的响应)时，会自动将请求者转到新位置。</span><br><span class="line"></span><br><span class="line">302 (临时移动) 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</span><br><span class="line"></span><br><span class="line">303 (查看其他位置) 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</span><br><span class="line"></span><br><span class="line">304 (未修改) 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。</span><br><span class="line"></span><br><span class="line">305 (使用代理) 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。</span><br><span class="line"></span><br><span class="line">307 (临时重定向) 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</span><br><span class="line"></span><br><span class="line">4xx(请求错误) 这些状态代码表示请求可能出错，妨碍了服务器的处理。</span><br><span class="line">400 (错误请求) 服务器不理解请求的语法。</span><br><span class="line"></span><br><span class="line">401 (未授权) 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</span><br><span class="line"></span><br><span class="line">403 (禁止) 服务器拒绝请求。</span><br><span class="line"></span><br><span class="line">404 (未找到) 服务器找不到请求的网页。</span><br><span class="line"></span><br><span class="line">405 (方法禁用) 禁用请求中指定的方法。</span><br><span class="line"></span><br><span class="line">406 (不接受) 无法使用请求的内容特性响应请求的网页。</span><br><span class="line"></span><br><span class="line">407 (需要代理授权) 此状态代码与 401(未授权)类似，但指定请求者应当授权使用代理。</span><br><span class="line"></span><br><span class="line">408 (请求超时) 服务器等候请求时发生超时。</span><br><span class="line"></span><br><span class="line">409 (冲突) 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。</span><br><span class="line"></span><br><span class="line">410 (已删除) 如果请求的资源已永久删除，服务器就会返回此响应。</span><br><span class="line"></span><br><span class="line">411 (需要有效长度) 服务器不接受不含有效内容长度标头字段的请求。</span><br><span class="line"></span><br><span class="line">412 (未满足前提条件) 服务器未满足请求者在请求中设置的其中一个前提条件。</span><br><span class="line"></span><br><span class="line">413 (请求实体过大) 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</span><br><span class="line"></span><br><span class="line">414 (请求的 URI 过长) 请求的 URI(通常为网址)过长，服务器无法处理。</span><br><span class="line"></span><br><span class="line">415 (不支持的媒体类型) 请求的格式不受请求页面的支持。</span><br><span class="line"></span><br><span class="line">416 (请求范围不符合要求) 如果页面无法提供请求的范围，则服务器会返回此状态代码。</span><br><span class="line"></span><br><span class="line">417 (未满足期望值) 服务器未满足&quot;期望&quot;请求标头字段的要求。</span><br><span class="line"></span><br><span class="line">5xx(服务器错误)这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</span><br><span class="line">500 (服务器内部错误) 服务器遇到错误，无法完成请求。</span><br><span class="line"></span><br><span class="line">501 (尚未实施) 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。</span><br><span class="line"></span><br><span class="line">502 (错误网关) 服务器作为网关或代理，从上游服务器收到无效响应。</span><br><span class="line"></span><br><span class="line">503 (服务不可用) 服务器目前无法使用(由于超载或停机维护)。 通常，这只是暂时状态。</span><br><span class="line"></span><br><span class="line">504 (网关超时) 服务器作为网关或代理，但是没有及时从上游服务器收到请求。</span><br><span class="line"></span><br><span class="line">505 (HTTP 版本不受支持) 服务器不支持请求中所用的 HTTP 协议版本。</span><br></pre></td></tr></table></figure><h1 id="请写出一个-HTTP-post-请求的内容，包括四部分。"><a href="#请写出一个-HTTP-post-请求的内容，包括四部分。" class="headerlink" title="请写出一个 HTTP post 请求的内容，包括四部分。"></a>请写出一个 HTTP post 请求的内容，包括四部分。</h1><p>其中<br>第四部分的内容是 username=ff&amp;password=123</p><p>第二部分必须含有 Content-Type 字段</p><p>请求的路径为 /path</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 POST /path HTTP/1.1</span><br><span class="line">2 Host: www.demo.com</span><br><span class="line">2 Cache-Control: no-cache</span><br><span class="line">2 Postman-Token: 81d7b315-d4be-8ee8-1237-04f3976de032</span><br><span class="line">2 Content-Type: application/x-www-form-urlencoded</span><br><span class="line">3 </span><br><span class="line">4 username=ff&amp;password=123</span><br></pre></td></tr></table></figure><h1 id="请说出至少三种排序的思路，这三种排序的时间复杂度分别为"><a href="#请说出至少三种排序的思路，这三种排序的时间复杂度分别为" class="headerlink" title="请说出至少三种排序的思路，这三种排序的时间复杂度分别为"></a>请说出至少三种排序的思路，这三种排序的时间复杂度分别为</h1><p>O(n*n)</p><p>O(n log2 n)</p><p>O(n + max)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.O(n*n)冒泡排序（升序）</span><br><span class="line">选择第1个和第2个数字，如果第1个&gt;第2个则二者交换位置，之后选择第2个和第3个数字，类似交换处理，一轮下来后，最大的数字会冒泡到最后一位。接下来，忽略已经排好的数字，对剩下的数字进行新一轮排序，直到所有数字都排序完成。</span><br><span class="line">2.O(n log2 n)快速排序</span><br><span class="line">从数列中挑出一个元素称为基准；</span><br><span class="line">重新排序数列，所有比基准值小的元素放在基准前面，所有比基准值大的元素放在基准后面(相等的数可以放在任一边)；</span><br><span class="line">递归的把小于基准值的子数列和大于基准值的子数列排序；</span><br><span class="line">递归到最底部时，数列的大小是零或一，也就是已经排序好了。</span><br><span class="line">3.O(n + max)基数排序</span><br><span class="line">将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后，数列就变成一个有序序列。</span><br></pre></td></tr></table></figure><h1 id="一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？"><a href="#一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？" class="headerlink" title="一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？"></a>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？</h1><p>这一题是在挖掘你的知识边界，所以你知道多少就要答多少。</p><p>可以先查阅一些资料再查，但是不要把自己不懂的东西放在答案里，面试官会追问的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">1.DNS解析</span><br><span class="line">DNS解析的过程就是寻找哪台机器上有你需要资源的过程。当你在浏览器中输入一个地址时，例如www.baidu.com，其实不是百度网站真正意义上的地址。互联网上每一台计算机的唯一标识是它的IP地址，但是IP地址并不方便记忆。用户更喜欢用方便记忆的网址去寻找互联网上的其它计算机，也就是上面提到的百度的网址。所以互联网设计者需要在用户的方便性与可用性方面做一个权衡，这个权衡就是一个网址到IP地址的转换，这个过程就是DNS解析。</span><br><span class="line"></span><br><span class="line">2.TCP连接</span><br><span class="line">每次建立连接前，客户端和服务端之前都要先进行三次对话才开始正式传输内容，三次对话大概是这样的：</span><br><span class="line"></span><br><span class="line"> 1. 客户端：我要连接你了，可以吗</span><br><span class="line"> 2. 服务端：嗯，我准备好了，连接我吧</span><br><span class="line"> 3. 客户端：那我连接你咯。</span><br><span class="line"> 4. 开始后面步骤</span><br><span class="line">3.发送HTTP请求</span><br><span class="line">其实这部分又可以称为前端工程师眼中的HTTP，它主要发生在客户端。发送HTTP请求的过程就是构建HTTP请求报文并通过TCP协议中发送到服务器指定端口(HTTP协议80/8080, HTTPS协议443)。HTTP请求报文是由三部分组成: 请求行, 请求报头和请求正文。</span><br><span class="line"></span><br><span class="line">1 动词 路径 协议/版本</span><br><span class="line">2 Key1: value1</span><br><span class="line">2 Key2: value2</span><br><span class="line">2 Key3: value3</span><br><span class="line">2 Content-Type: application/x-www-form-urlencoded</span><br><span class="line">2 Host: www.baidu.com</span><br><span class="line">2 User-Agent: curl/7.54.0</span><br><span class="line">3 </span><br><span class="line">4 要上传的数据</span><br><span class="line">4.服务器处理请求并返回HTTP报文</span><br><span class="line">HTTP响应报文也是由三部分组成: 状态码, 响应报头和响应报文。</span><br><span class="line">状态码</span><br><span class="line">状态码是由3位数组成，第一个数字定义了响应的类别，且有五种可能取值:</span><br><span class="line"></span><br><span class="line">1xx：指示信息–表示请求已接收，继续处理。</span><br><span class="line"></span><br><span class="line">2xx：成功–表示请求已被成功接收、理解、接受。</span><br><span class="line"></span><br><span class="line">3xx：重定向–要完成请求必须进行更进一步的操作。</span><br><span class="line"></span><br><span class="line">4xx：客户端错误–请求有语法错误或请求无法实现。</span><br><span class="line"></span><br><span class="line">5xx：服务器端错误–服务器未能实现合法的请求。</span><br><span class="line">平时遇到比较常见的状态码有:200, 204, 301, 302, 304, 400, 401, 403, 404, 422, 500</span><br><span class="line"></span><br><span class="line">5.浏览器解析渲染页面</span><br><span class="line">浏览器是一个边解析边渲染的过程。首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上</span><br><span class="line"></span><br><span class="line">6.连接结束</span><br><span class="line">通过四次挥手关闭连接。一端断开连接需要两次挥手（请求和回应），两端断开连接就需要四次挥手。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="如何实现数组去重？"><a href="#如何实现数组去重？" class="headerlink" title="如何实现数组去重？"></a>如何实现数组去重？</h1><p>假设有数组 array = [1,5,2,3,4,2,3,1,3,4]</p><p>你要写一个函数 unique，使得<br>unique(array) 的值为 [1,5,2,3,4]<br>也就是把重复的值都去掉，只保留不重复的值。</p><p>要求：</p><p>不要做多重循环，只能遍历一次<br>请给出两种方案，一种能在 ES 5 环境中运行，一种能在 ES 6 环境中运行（提示 ES 6 环境多了一个 Set 对象）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ES 5</span><br><span class="line">ES5 提供了 filter 方法，我们可以用来简化外层循环：</span><br><span class="line">比如使用 indexOf 的方法：</span><br><span class="line"></span><br><span class="line">function unique(array) &#123;</span><br><span class="line">    var res = array.filter(function(item, index, array)&#123;</span><br><span class="line">        return array.indexOf(item) === index;</span><br><span class="line">    &#125;)</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line">console.log(unique(array));</span><br><span class="line">排序去重的方法：</span><br><span class="line"></span><br><span class="line">function unique(array) &#123;</span><br><span class="line">    return array.concat().sort().filter(function(item, index, array)&#123;</span><br><span class="line">        return !index || item !== array[index - 1]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">console.log(unique(array));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ES 6</span><br><span class="line"></span><br><span class="line">function unique(array) &#123;</span><br><span class="line">    return [...new Set(array)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己写一个简版jQuery</title>
      <link href="/2019/04/24/%E8%87%AA%E5%B7%B1%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E7%89%88jQuery/"/>
      <url>/2019/04/24/%E8%87%AA%E5%B7%B1%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E7%89%88jQuery/</url>
      
        <content type="html"><![CDATA[<p>为了便于学习与理解jQuery，自己尝试去写一个只有两个API的简版jQuery。</p><h1 id="什么是JQuery"><a href="#什么是JQuery" class="headerlink" title="什么是JQuery"></a>什么是JQuery</h1><p>jQuery是js的一个工具库，由John Resig在2006年发布。</p><p>j代表JavaScript，query是“查询”的意思。也就是说，这个库的意图是基于JavaScript的查询。</p><p>查询的目标是什么？</p><p>答案是DOM（文档对象模型）结构中的Node（节点）。一个网页就是一个html文档，而网页上的所有内容都是节点，包括文档节点、元素节点、文本节点、注释节点、属性节点等等。而jQuery的查询最主要针对的是元素节点，如段落（p）、锚点（a）、表格（table）等，只有少数方法可以处理文本节点与注释节点。同时jQuery还可以用attr方法方便地对元素节点的属性进行读取/设置。</p><p><strong>jQuery的核心是通过各种选择器，选中DOM元素</strong></p><h1 id="节点或者选择器判断"><a href="#节点或者选择器判断" class="headerlink" title="节点或者选择器判断"></a>节点或者选择器判断</h1><p>由于jQuery支持传参字符串，所以先判断参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">window.jQuery = function(nodeOrSelector) &#123;</span><br><span class="line">  let nodes = &#123;&#125;</span><br><span class="line">  if (typeof nodeOrSelector === &#x27;string&#x27;) &#123;</span><br><span class="line">    let temp = document.querySelectorAll(nodeOrSelector)</span><br><span class="line">    for (let i = 0; i &lt; temp.length; i++) &#123;</span><br><span class="line">      nodes[i] = temp[i]</span><br><span class="line">    &#125;</span><br><span class="line">    nodes.length = temp.length</span><br><span class="line">  &#125; else if (nodeOrSelector instanceof Node) &#123;</span><br><span class="line">    nodes = &#123;</span><br><span class="line">      0: nodeOrSelector,</span><br><span class="line">      length: 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    return nodes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="addClass方法"><a href="#addClass方法" class="headerlink" title="addClass方法"></a>addClass方法</h1><p>jQuery的addClass方法，用于为DOM元素添加一个class。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　$(&#x27;body&#x27;).addClass(&#x27;hasJS&#x27;);</span><br></pre></td></tr></table></figure><p>DOM元素本身有一个可读写的className属性，可以用来操作class。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　document.body.className = &#x27;hasJS&#x27;;</span><br><span class="line"></span><br><span class="line">　　// or</span><br><span class="line"></span><br><span class="line">　　document.body.className += &#x27; hasJS&#x27;;</span><br></pre></td></tr></table></figure><p>HTML 5还提供一个classList对象，功能更强大（IE 9不支持）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">　　document.body.classList.add(&#x27;hasJS&#x27;);</span><br><span class="line"></span><br><span class="line">　　document.body.classList.remove(&#x27;hasJS&#x27;);</span><br><span class="line"></span><br><span class="line">　　document.body.classList.toggle(&#x27;hasJS&#x27;);</span><br><span class="line"></span><br><span class="line">　　document.body.classList.contains(&#x27;hasJS&#x27;);</span><br></pre></td></tr></table></figure><p>自己动手实现addClass方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nodes.addClass = function(classes) &#123;</span><br><span class="line">  for (let i = 0; i &lt; nodes.length;i++) &#123;</span><br><span class="line">    nodes[i].classList.add(classes)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="setText方法"><a href="#setText方法" class="headerlink" title="setText方法"></a>setText方法</h1><p>改变textContent的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nodes.setText = function(text) &#123;</span><br><span class="line">  for (let i = 0; i &lt; nodes.length; i++) &#123;</span><br><span class="line">    nodes[i].textContent = text</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">window.jQuery = function(nodeOrSelector) &#123;</span><br><span class="line">  let nodes = &#123;&#125;</span><br><span class="line">  if (typeof nodeOrSelector === &#x27;string&#x27;) &#123;</span><br><span class="line">    let temp = document.querySelectorAll(nodeOrSelector)</span><br><span class="line">    for (let i = 0; i &lt; temp.length; i++) &#123;</span><br><span class="line">      nodes[i] = temp[i]</span><br><span class="line">    &#125;</span><br><span class="line">    nodes.length = temp.length</span><br><span class="line">  &#125; else if (nodeOrSelector instanceof Node) &#123;</span><br><span class="line">    nodes = &#123;</span><br><span class="line">      0: nodeOrSelector,</span><br><span class="line">      length: 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  nodes.addClass = function(classes) &#123;</span><br><span class="line">    for (let i = 0; i &lt; nodes.length;i++) &#123;</span><br><span class="line">      nodes[i].classList.add(classes)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  nodes.setText = function(text) &#123;</span><br><span class="line">    for (let i = 0; i &lt; nodes.length; i++) &#123;</span><br><span class="line">      nodes[i].textContent = text</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return nodes</span><br><span class="line">&#125;</span><br><span class="line">window.$ = jQuery</span><br><span class="line"></span><br><span class="line">var $div = $(&#x27;div&#x27;)</span><br><span class="line">$div.addClass(&#x27;red&#x27;) // 可将所有 div 的 class 添加一个 red</span><br><span class="line">$div.setText(&#x27;hi&#x27;) // 可将所有 div 的 textContent 变为 hi</span><br></pre></td></tr></table></figure><p><strong>参考资料：阮一峰-<a href="http://www.ruanyifeng.com/blog/2013/05/jquery-free.html">如何做到jQuery</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS函数的五种声明方式</title>
      <link href="/2019/04/17/JS%E5%87%BD%E6%95%B0%E7%9A%84%E4%BA%94%E7%A7%8D%E5%A3%B0%E6%98%8E%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/04/17/JS%E5%87%BD%E6%95%B0%E7%9A%84%E4%BA%94%E7%A7%8D%E5%A3%B0%E6%98%8E%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="具名函数"><a href="#具名函数" class="headerlink" title="具名函数"></a>具名函数</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function f(x,y)&#123;return x +y &#125;</span><br></pre></td></tr></table></figure><p>关键字+函数名+参数+{}<br>function 和var意思差不多，表示声明一个特殊的变量（对象）</p><h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = function(x,y)&#123;return x +y &#125;</span><br></pre></td></tr></table></figure><h1 id="给变量赋值一个具名函数"><a href="#给变量赋值一个具名函数" class="headerlink" title="给变量赋值一个具名函数"></a>给变量赋值一个具名函数</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = function n(x,y)&#123;return x +y &#125;</span><br></pre></td></tr></table></figure><p><strong>函数n的作用域只限函数内，和具名函数不同，体现了JS的不一致性，不建议使用。</strong></p><h1 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.Fuction函数对象</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new Fuction (&#x27;x&#x27;,&#x27;y&#x27;,&#x27;return x + y &#x27;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var n = 1</span><br><span class="line">new Fuction (&#x27;x&#x27;,&#x27;y&#x27;,&#x27;return x&#x27; +n+ &#x27;return y &#x27;)</span><br><span class="line">f(1,2)</span><br><span class="line">//4</span><br><span class="line">//等同于</span><br><span class="line">//new Fuction (&#x27;x&#x27;,&#x27;y&#x27;,&#x27;return x+n+ y&#x27;)</span><br></pre></td></tr></table></figure><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>箭头函数都是匿名函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f=(x,y) =&gt; &#123; return x + y&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sum = (x,y) =&gt; &#123;return x + y&#125;</span><br><span class="line">sum(1,2)</span><br><span class="line">//3</span><br><span class="line">sum(2,4)</span><br><span class="line">//6</span><br></pre></td></tr></table></figure><p>简化  return和{}必须同时省略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sum = (x,y) =&gt; x + y</span><br><span class="line">sum(1,2)</span><br><span class="line">//3</span><br><span class="line">sum(2,4)</span><br><span class="line">//6</span><br></pre></td></tr></table></figure><p>如果只有一个参数的情况下可以这样写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = n =&gt; n*n</span><br><span class="line">n(2)</span><br><span class="line">//4</span><br><span class="line">n(3)</span><br><span class="line">//9</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS的数组与伪数组的区别</title>
      <link href="/2019/04/13/JS%E7%9A%84%E6%95%B0%E7%BB%84%E4%B8%8E%E4%BC%AA%E6%95%B0%E7%BB%84%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/04/13/JS%E7%9A%84%E6%95%B0%E7%BB%84%E4%B8%8E%E4%BC%AA%E6%95%B0%E7%BB%84%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>在JavaScript中，除了6种原始数据类型之外，其他所有的都是对象，包括函数（Function）。</p><p>基本数据类型：String,boolean,Number,Undefined, Null,Symbol</p><p>引用数据类型：Object(Array,Date,RegExp,Function)</p><p>在这个前提下，咱们再来讨论JavaScript的对象。</p><h1 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;; //种方式创建对象，被称之为对象直接量（Object Literal）</span><br><span class="line">var obj = new Object(); // 创建一个空对象，和&#123;&#125;一样</span><br></pre></td></tr></table></figure><h1 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [];//这是使用数组直接量（Array Literal）创建数组</span><br><span class="line">var arr = new Array();//构造函数Array() 创建数组对象</span><br></pre></td></tr></table></figure><h1 id="对象与数组的关系"><a href="#对象与数组的关系" class="headerlink" title="对象与数组的关系"></a>对象与数组的关系</h1><p>在说区别之前，需要先提到另外一个知识，就是JavaScript的原型继承。所有JavaScript的内置构造函数都是继承自 Object.prototype。在这个前提下，可以理解为使用 new Array() 或 [] 创建出来的数组对象，都会拥有 Object.prototype 的属性值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;;// 拥有Object.prototype的属性值</span><br><span class="line">var arr = [];</span><br><span class="line">//使用数组直接量创建的数组，由于Array.prototype的属性继承自 Object.prototype，</span><br><span class="line">//那么，它将同时拥有Array.prototype和Object.prototype的属性值</span><br></pre></td></tr></table></figure><p>可以得到对象和数组的第一个区别：对象没有数组Array.prototype的属性值</p><h1 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h1><p>数组具有一个最基本特征：索引，这是对象所没有的，下面来看一段代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;;</span><br><span class="line">var arr = [];</span><br><span class="line"> </span><br><span class="line">obj[2] = &#x27;a&#x27;;</span><br><span class="line">arr[2] = &#x27;a&#x27;;</span><br><span class="line"> </span><br><span class="line">console.log(obj[2]); // 输出 a</span><br><span class="line">console.log(arr[2]); // 输出 a</span><br><span class="line">console.log(obj.length); // 输出 undefined</span><br><span class="line">console.log(arr.length); // 输出 3</span><br></pre></td></tr></table></figure><p>通过上面这个测试，可以看到，虽然 obj[2]与arr[2] 都输出’a’，但是，在输出length上有明显的差异，这是为什么呢？</p><h2 id="obj-2-与arr-2-的区别"><a href="#obj-2-与arr-2-的区别" class="headerlink" title="obj[2]与arr[2]的区别"></a>obj[2]与arr[2]的区别</h2><ul><li>obj[2]输出’a’，是因为对象就是普通的键值对存取数据</li><li>而arr[2]输出’a’则不同，数组是通过索引来存取数据，arr[2]之所以输出’a’，是因为数组arr索引2的位置已经存储了数据</li></ul><h2 id="obj-length与arr-length的区别"><a href="#obj-length与arr-length的区别" class="headerlink" title="obj.length与arr.length的区别"></a>obj.length与arr.length的区别</h2><ul><li>obj.length并不具有数组的特性，并且obj没有保存属性length，那么自然就会输出undefined</li><li>而对于数组来说，length是数组的一个内置属性，数组会根据索引长度来更改length的值。</li></ul><h2 id="为什么arr-length输出3，而不是1呢？"><a href="#为什么arr-length输出3，而不是1呢？" class="headerlink" title="为什么arr.length输出3，而不是1呢？"></a>为什么arr.length输出3，而不是1呢？</h2><p>这是由于数组的特殊实现机制，对于普通的数组，如果它的索引是从0开始连续的，那么length的值就会等于数组中元素个数</p><p>而对于上面例子中arr，在给数组添加元素时，并没有按照连续的索引添加，所以导致数组的索引不连续，那么就导致索引长度大于元素个数，那么我们称之为稀疏数组。</p><h1 id="伪数组"><a href="#伪数组" class="headerlink" title="伪数组"></a>伪数组</h1><p>定义：</p><ol><li>拥有length属性，其它属性（索引）为非负整数(对象中的索引会被当做字符串来处理，这里你可以当做是个非负整数串来理解)</li><li>不具有数组所具有的方法</li></ol><p>伪数组，就是像数组一样有 length 属性，也有 0、1、2、3 等属性的对象，看起来就像数组一样，但不是数组，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var fakeArray = &#123;</span><br><span class="line">    length: 3,</span><br><span class="line">    &quot;0&quot;: &quot;first&quot;,</span><br><span class="line">    &quot;1&quot;: &quot;second&quot;,</span><br><span class="line">    &quot;2&quot;: &quot;third&quot;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">for (var i = 0; i &lt; fakeArray.length; i++) &#123;</span><br><span class="line">    console.log(fakeArray[i]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Array.prototype.join.call(fakeArray,&#x27;+&#x27;);</span><br></pre></td></tr></table></figure><p>常见的参数的参数 arguments，DOM 对象列表（比如通过 document.getElementsByTags 得到的列表），jQuery 对象（比如 $(“div”)）。</p><p>伪数组是一个 Object，而真实的数组是一个 Array</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fakeArray instanceof Array === false;</span><br><span class="line">Object.prototype.toString.call(fakeArray) === &quot;[object Object]&quot;;</span><br><span class="line"> </span><br><span class="line">var arr = [1,2,3,4,6];</span><br><span class="line">arr instanceof Array === true;</span><br><span class="line">Object.prototype.toString.call(arr) === &quot;[object Array]&quot;</span><br></pre></td></tr></table></figure><p>代码用来判断一个对象是否属于“类数组”。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// Determine if o is an array-like object.</span><br><span class="line">// Strings and functions have numeric length properties, but are</span><br><span class="line">// excluded by the typeof test. In client-side JavaScript, DOM text</span><br><span class="line">// nodes have a numeric length property, and may need to be excluded</span><br><span class="line">// with an additional o.nodeType != 3 test.</span><br><span class="line">function isArrayLike(o) &#123;   </span><br><span class="line">    if (o &amp;&amp;                                // o is not null, undefined, etc.</span><br><span class="line">            typeof o === &#x27;object&#x27; &amp;&amp;            // o is an object</span><br><span class="line">            isFinite(o.length) &amp;&amp;               // o.length is a finite number</span><br><span class="line">            o.length &gt;= 0 &amp;&amp;                    // o.length is non-negative</span><br><span class="line">            o.length===Math.floor(o.length) &amp;&amp;  // o.length is an integer</span><br><span class="line">            o.length &lt; 4294967296)              // o.length &lt; 2^32</span><br><span class="line">            return true;                        // Then o is array-like</span><br><span class="line">    else</span><br><span class="line">            return false;                       // Otherwise it is not</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 不过有个更简单的办法来判断，用 Array.isArray</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Array.isArray(fakeArray) === false;</span><br><span class="line">Array.isArray(arr) === true;</span><br></pre></td></tr></table></figure><p> 从外观上看伪数组，看不出来它与数组的区别，在JavaScript内置对象中常见的伪数组就是大名鼎鼎的auguments：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(function() &#123;</span><br><span class="line">  console.log(typeof arguments); // 输出 object，它并不是一个数组</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p> 另外在DOM对象中，childNodes也是伪数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(typeof document.body.childNodes); // 输出 object</span><br></pre></td></tr></table></figure><p>除此之外，还有很多常用的伪数组，就不一一列举。</p><p>伪数组存在的意义，是可以让普通的对象也能正常使用数组的很多算法，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var arr = Array.prototype.slice.call(arguments)</span><br><span class="line"> </span><br><span class="line">或者</span><br><span class="line">var arr = Array.prototype.slice.call(arguments, 0); // 将arguments对象转换成一个真正的数组</span><br><span class="line"> </span><br><span class="line">Array.prototype.forEach.call(arguments, function(v) &#123;</span><br><span class="line">  // 循环arguments对象</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> 除了使用 Array.prototype.slice.call(arguments)，你也可以简单的使用[].slice.call(arguments) 来代替。另外，你可以使用 bind 来简化该过程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var unboundSlice = Array.prototype.slice;</span><br><span class="line">var slice = Function.prototype.call.bind(unboundSlice);</span><br><span class="line"> </span><br><span class="line">function list() &#123;</span><br><span class="line">  return slice(arguments);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">var list1 = list(1, 2, 3); // [1, 2, 3]</span><br></pre></td></tr></table></figure><p>将具有length属性的对象转换成数组对象，arguments是每个函数在运行的时候自动获得的一个近似数组的对象（传入函数的参数从0开始按数字排列，而且有length）。</p><p>比如当你 func(‘a’, ‘b’, ‘c’) 的时候，func里面获得的arguments[0] 是 ‘a’，arguments[1] 是 ‘b’，依次类推。但问题在于这个arguments对象其实并不是Array，所以没有slice方法。Array.prototype.slice.call( )可以间接对其实现slice的效果，而且返回的结果是真正的Array。</p><p>对于IE9以前的版本(DOM实现基于COM)，我们可以使用makeArray来实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 伪数组转化成数组</span><br><span class="line">var makeArray = function(obj) &#123;   </span><br><span class="line">    if (!obj || obj.length === 0) &#123;       </span><br><span class="line">        return [];</span><br><span class="line">    &#125;   </span><br><span class="line">    // 非伪类对象，直接返回最好</span><br><span class="line">    if (!obj.length) &#123;       </span><br><span class="line">        return obj;</span><br><span class="line">    &#125;   </span><br><span class="line">    // 针对IE8以前 DOM的COM实现</span><br><span class="line">    try &#123;       </span><br><span class="line">        return [].slice.call(obj);</span><br><span class="line">    &#125; catch (e) &#123;       </span><br><span class="line">        var i = 0,</span><br><span class="line">            j = obj.length,</span><br><span class="line">            res = [];       </span><br><span class="line">        for (; i &lt; j; i++) &#123;</span><br><span class="line">            res.push(obj[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对象没有数组Array.prototype的属性值，类型是Object，而数组类型是Array；</p><p>数组是基于索引的实现，length会自动更新，而对象是键值对；</p><p>使用对象可以创建伪数组，伪数组可以正常使用数组的大部分方法；</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见DOM以及API总结</title>
      <link href="/2019/04/12/%E5%B8%B8%E8%A7%81DOM%E4%BB%A5%E5%8F%8AAPI%E6%80%BB%E7%BB%93/"/>
      <url>/2019/04/12/%E5%B8%B8%E8%A7%81DOM%E4%BB%A5%E5%8F%8AAPI%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><p>DOM 是 JavaScript 操作网页的接口，全称为“文档对象模型”（Document Object Model）。它的作用是将网页转为一个 JavaScript 对象，从而可以用脚本进行各种操作（比如增删内容）。</p><p>浏览器会根据 DOM 模型，将结构化文档（比如 HTML 和 XML）解析成一系列的节点，再由这些节点组成一个树状结构（DOM Tree）。所有的节点和最终的树状结构，都有规范的对外接口。</p><p>DOM 只是一个接口规范，可以用各种语言实现。所以严格地说，DOM 不是 JavaScript 语法的一部分，但是 DOM 操作是 JavaScript 最常见的任务，离开了 DOM，JavaScript 就无法控制网页。另一方面，JavaScript 也是最常用于 DOM 操作的语言。后面介绍的就是 JavaScript 对 DOM 标准的实现和用法。</p><h1 id="Node-接口"><a href="#Node-接口" class="headerlink" title="Node 接口"></a>Node 接口</h1><h2 id="Node-prototype-nodeType"><a href="#Node-prototype-nodeType" class="headerlink" title="Node.prototype.nodeType"></a>Node.prototype.nodeType</h2><p>nodeType属性返回一个整数值，表示节点的类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.nodeType // 9</span><br></pre></td></tr></table></figure><p>上面代码中，文档节点的类型值为9。</p><p>Node 对象定义了几个常量，对应这些类型值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.nodeType === Node.DOCUMENT_NODE // true</span><br></pre></td></tr></table></figure><p>上面代码中，文档节点的nodeType属性等于常量Node.DOCUMENT_NODE。</p><p>不同节点的nodeType属性值和对应的常量如下。</p><ul><li>文档节点（document）：9，对应常量Node.DOCUMENT_NODE</li><li>元素节点（element）：1，对应常量Node.ELEMENT_NODE</li><li>属性节点（attr）：2，对应常量Node.ATTRIBUTE_NODE</li><li>文本节点（text）：3，对应常量Node.TEXT_NODE</li><li>文档片断节点（DocumentFragment）：11，对应常量Node.DOCUMENT_FRAGMENT_NODE</li><li>文档类型节点（DocumentType）：10，对应常量Node.DOCUMENT_TYPE_NODE</li><li>注释节点（Comment）：8，对应常量Node.COMMENT_NODE<br>确定节点类型时，使用nodeType属性是常用方法。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var node = document.documentElement.firstChild;</span><br><span class="line">if (node.nodeType === Node.ELEMENT_NODE) &#123;</span><br><span class="line">  console.log(&#x27;该节点是元素节点&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Node-prototype-nodeName"><a href="#Node-prototype-nodeName" class="headerlink" title="Node.prototype.nodeName"></a>Node.prototype.nodeName</h2><p>nodeName属性返回节点的名称。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// HTML 代码如下</span><br><span class="line">// &lt;div id=&quot;d1&quot;&gt;hello world&lt;/div&gt;</span><br><span class="line">var div = document.getElementById(&#x27;d1&#x27;);</span><br><span class="line">div.nodeName // &quot;DIV&quot;</span><br></pre></td></tr></table></figure><p>上面代码中，元素节点<div>的nodeName属性就是大写的标签名DIV。</p><p>不同节点的nodeName属性值如下。</p><ul><li>文档节点（document）：#document</li><li>元素节点（element）：大写的标签名</li><li>属性节点（attr）：属性的名称</li><li>文本节点（text）：#text</li><li>文档片断节点（DocumentFragment）：#document-fragment</li><li>文档类型节点（DocumentType）：文档的类型</li><li>注释节点（Comment）：#comment<h2 id="Node-prototype-nodeValue"><a href="#Node-prototype-nodeValue" class="headerlink" title="Node.prototype.nodeValue"></a>Node.prototype.nodeValue</h2>nodeValue属性返回一个字符串，表示当前节点本身的文本值，该属性可读写。</li></ul><p>只有文本节点（text）、注释节点（comment）和属性节点（attr）有文本值，因此这三类节点的nodeValue可以返回结果，其他类型的节点一律返回null。同样的，也只有这三类节点可以设置nodeValue属性的值，其他类型的节点设置无效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// HTML 代码如下</span><br><span class="line">// &lt;div id=&quot;d1&quot;&gt;hello world&lt;/div&gt;</span><br><span class="line">var div = document.getElementById(&#x27;d1&#x27;);</span><br><span class="line">div.nodeValue // null</span><br><span class="line">div.firstChild.nodeValue // &quot;hello world&quot;</span><br></pre></td></tr></table></figure><p>上面代码中，div是元素节点，nodeValue属性返回null。div.firstChild是文本节点，所以可以返回文本值。</p><h2 id="Node-prototype-textContent"><a href="#Node-prototype-textContent" class="headerlink" title="Node.prototype.textContent"></a>Node.prototype.textContent</h2><p>textContent属性返回当前节点和它的所有后代节点的文本内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// HTML 代码为</span><br><span class="line">// &lt;div id=&quot;divA&quot;&gt;This is &lt;span&gt;some&lt;/span&gt; text&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">document.getElementById(&#x27;divA&#x27;).textContent</span><br><span class="line">// This is some text</span><br></pre></td></tr></table></figure><p>textContent属性自动忽略当前节点内部的 HTML 标签，返回所有文本内容。</p><p>该属性是可读写的，设置该属性的值，会用一个新的文本节点，替换所有原来的子节点。它还有一个好处，就是自动对 HTML 标签转义。这很适合用于用户提供的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(&#x27;foo&#x27;).textContent = &#x27;&lt;p&gt;GoodBye!&lt;/p&gt;&#x27;;</span><br></pre></td></tr></table></figure><p>上面代码在插入文本时，会将<p>标签解释为文本，而不会当作标签处理。</p><p>对于文本节点（text）、注释节点（comment）和属性节点（attr），textContent属性的值与nodeValue属性相同。对于其他类型的节点，该属性会将每个子节点（不包括注释节点）的内容连接在一起返回。如果一个节点没有子节点，则返回空字符串。</p><p>文档节点（document）和文档类型节点（doctype）的textContent属性为null。如果要读取整个文档的内容，可以使用document.documentElement.textContent。</p><h2 id="Node-prototype-baseURI"><a href="#Node-prototype-baseURI" class="headerlink" title="Node.prototype.baseURI"></a>Node.prototype.baseURI</h2><p>baseURI属性返回一个字符串，表示当前网页的绝对路径。浏览器根据这个属性，计算网页上的相对路径的 URL。该属性为只读。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 当前网页的网址为</span><br><span class="line">// http://www.example.com/index.html</span><br><span class="line">document.baseURI</span><br><span class="line">// &quot;http://www.example.com/index.html&quot;</span><br></pre></td></tr></table></figure><p>如果无法读到网页的 URL，baseURI属性返回null。</p><p>该属性的值一般由当前网址的 URL（即window.location属性）决定，但是可以使用 HTML 的<base>标签，改变该属性的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;base href=&quot;http://www.example.com/page.html&quot;&gt;</span><br></pre></td></tr></table></figure><p>设置了以后，baseURI属性就返回<base>标签设置的值。</p><h2 id="Node-prototype-ownerDocument"><a href="#Node-prototype-ownerDocument" class="headerlink" title="Node.prototype.ownerDocument"></a>Node.prototype.ownerDocument</h2><p>Node.ownerDocument属性返回当前节点所在的顶层文档对象，即document对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var d = p.ownerDocument;</span><br><span class="line">d === document // true</span><br></pre></td></tr></table></figure><p>document对象本身的ownerDocument属性，返回null。</p><h2 id="Node-prototype-nextSibling"><a href="#Node-prototype-nextSibling" class="headerlink" title="Node.prototype.nextSibling"></a>Node.prototype.nextSibling</h2><p>Node.nextSibling属性返回紧跟在当前节点后面的第一个同级节点。如果当前节点后面没有同级节点，则返回null。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// HTML 代码如下</span><br><span class="line">// &lt;div id=&quot;d1&quot;&gt;hello&lt;/div&gt;&lt;div id=&quot;d2&quot;&gt;world&lt;/div&gt;</span><br><span class="line">var d1 = document.getElementById(&#x27;d1&#x27;);</span><br><span class="line">var d2 = document.getElementById(&#x27;d2&#x27;);</span><br><span class="line"></span><br><span class="line">d1.nextSibling === d2 // true</span><br></pre></td></tr></table></figure><p>上面代码中，d1.nextSibling就是紧跟在d1后面的同级节点d2。</p><p>注意，该属性还包括文本节点和注释节点（<!-- comment -->）。因此如果当前节点后面有空格，该属性会返回一个文本节点，内容为空格。</p><p>nextSibling属性可以用来遍历所有子节点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var el = document.getElementById(&#x27;div1&#x27;).firstChild;</span><br><span class="line"></span><br><span class="line">while (el !== null) &#123;</span><br><span class="line">  console.log(el.nodeName);</span><br><span class="line">  el = el.nextSibling;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码遍历div1节点的所有子节点。</p><h1 id="NodeList-接口"><a href="#NodeList-接口" class="headerlink" title="NodeList 接口"></a>NodeList 接口</h1><p>NodeList实例是一个类似数组的对象，它的成员是节点对象。通过以下方法可以得到NodeList实例。</p><ul><li>Node.childNodes</li><li>document.querySelectorAll()等节点搜索方法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.body.childNodes instanceof NodeList // true</span><br></pre></td></tr></table></figure>NodeList实例很像数组，可以使用length属性和forEach方法。但是，它不是数组，不能使用pop或push之类数组特有的方法。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var children = document.body.childNodes;</span><br><span class="line"></span><br><span class="line">Array.isArray(children) // false</span><br><span class="line"></span><br><span class="line">children.length // 34</span><br><span class="line">children.forEach(console.log)</span><br></pre></td></tr></table></figure>上面代码中，NodeList 实例children不是数组，但是具有length属性和forEach方法。</li></ul><p>如果NodeList实例要使用数组方法，可以将其转为真正的数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var children = document.body.childNodes;</span><br><span class="line">var nodeArr = Array.prototype.slice.call(children);</span><br></pre></td></tr></table></figure><p>除了使用forEach方法遍历 NodeList 实例，还可以使用for循环。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var children = document.body.childNodes;</span><br><span class="line"></span><br><span class="line">for (var i = 0; i &lt; children.length; i++) &#123;</span><br><span class="line">  var item = children[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，NodeList 实例可能是动态集合，也可能是静态集合。所谓动态集合就是一个活的集合，DOM 删除或新增一个相关节点，都会立刻反映在 NodeList 实例。目前，只有Node.childNodes返回的是一个动态集合，其他的 NodeList 都是静态集合。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var children = document.body.childNodes;</span><br><span class="line">children.length // 18</span><br><span class="line">document.body.appendChild(document.createElement(&#x27;p&#x27;));</span><br><span class="line">children.length // 19</span><br></pre></td></tr></table></figure><p>上面代码中，文档增加一个子节点，NodeList 实例children的length属性就增加了1。</p><h2 id="NodeList-prototype-length"><a href="#NodeList-prototype-length" class="headerlink" title="NodeList.prototype.length"></a>NodeList.prototype.length</h2><p>length属性返回 NodeList 实例包含的节点数量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.querySelectorAll(&#x27;xxx&#x27;).length</span><br><span class="line">// 0</span><br></pre></td></tr></table></figure><p>上面代码中，document.querySelectorAll返回一个 NodeList 集合。对于那些不存在的 HTML 标签，length属性返回0。</p><h2 id="NodeList-prototype-forEach"><a href="#NodeList-prototype-forEach" class="headerlink" title="NodeList.prototype.forEach()"></a>NodeList.prototype.forEach()</h2><p>forEach方法用于遍历 NodeList 的所有成员。它接受一个回调函数作为参数，每一轮遍历就执行一次这个回调函数，用法与数组实例的forEach方法完全一致。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var children = document.body.childNodes;</span><br><span class="line">children.forEach(function f(item, i, list) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;, this);</span><br></pre></td></tr></table></figure><p>上面代码中，回调函数f的三个参数依次是当前成员、位置和当前 NodeList 实例。forEach方法的第二个参数，用于绑定回调函数内部的this，该参数可省略。</p><h2 id="NodeList-prototype-item"><a href="#NodeList-prototype-item" class="headerlink" title="NodeList.prototype.item()"></a>NodeList.prototype.item()</h2><p>item方法接受一个整数值作为参数，表示成员的位置，返回该位置上的成员。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.body.childNodes.item(0)</span><br></pre></td></tr></table></figure><p>上面代码中，item(0)返回第一个成员。</p><p>如果参数值大于实际长度，或者索引不合法（比如负数），item方法返回null。如果省略参数，item方法会报错。</p><p>所有类似数组的对象，都可以使用方括号运算符取出成员。一般情况下，都是使用方括号运算符，而不使用item方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.body.childNodes[0]</span><br></pre></td></tr></table></figure><h2 id="NodeList-prototype-keys-，NodeList-prototype-values-，NodeList-prototype-entries"><a href="#NodeList-prototype-keys-，NodeList-prototype-values-，NodeList-prototype-entries" class="headerlink" title="NodeList.prototype.keys()，NodeList.prototype.values()，NodeList.prototype.entries()"></a>NodeList.prototype.keys()，NodeList.prototype.values()，NodeList.prototype.entries()</h2><p>这三个方法都返回一个 ES6 的遍历器对象，可以通过for…of循环遍历获取每一个成员的信息。区别在于，keys()返回键名的遍历器，values()返回键值的遍历器，entries()返回的遍历器同时包含键名和键值的信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var children = document.body.childNodes;</span><br><span class="line"></span><br><span class="line">for (var key of children.keys()) &#123;</span><br><span class="line">  console.log(key);</span><br><span class="line">&#125;</span><br><span class="line">// 0</span><br><span class="line">// 1</span><br><span class="line">// 2</span><br><span class="line">// ...</span><br><span class="line"></span><br><span class="line">for (var value of children.values()) &#123;</span><br><span class="line">  console.log(value);</span><br><span class="line">&#125;</span><br><span class="line">// #text</span><br><span class="line">// &lt;script&gt;</span><br><span class="line">// ...</span><br><span class="line"></span><br><span class="line">for (var entry of children.entries()) &#123;</span><br><span class="line">  console.log(entry);</span><br><span class="line">&#125;</span><br><span class="line">// Array [ 0, #text ]</span><br><span class="line">// Array [ 1, &lt;script&gt; ]</span><br><span class="line">// ...</span><br></pre></td></tr></table></figure><h1 id="ParentNode-接口"><a href="#ParentNode-接口" class="headerlink" title="ParentNode 接口"></a>ParentNode 接口</h1><p>如果当前节点是父节点，就会继承ParentNode接口。由于只有元素节点（element）、文档节点（document）和文档片段节点（documentFragment）拥有子节点，因此只有这三类节点会继承ParentNode接口。</p><h2 id="ParentNode-children"><a href="#ParentNode-children" class="headerlink" title="ParentNode.children"></a>ParentNode.children</h2><p>children属性返回一个HTMLCollection实例，成员是当前节点的所有元素子节点。该属性只读。</p><p>下面是遍历某个节点的所有元素子节点的示例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 0; i &lt; el.children.length; i++) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，children属性只包括元素子节点，不包括其他类型的子节点（比如文本子节点）。如果没有元素类型的子节点，返回值HTMLCollection实例的length属性为0。</p><p>另外，HTMLCollection是动态集合，会实时反映 DOM 的任何变化。</p><h2 id="ParentNode-firstElementChild"><a href="#ParentNode-firstElementChild" class="headerlink" title="ParentNode.firstElementChild"></a>ParentNode.firstElementChild</h2><p>firstElementChild属性返回当前节点的第一个元素子节点。如果没有任何元素子节点，则返回null。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.firstElementChild.nodeName</span><br><span class="line">// &quot;HTML&quot;</span><br></pre></td></tr></table></figure><p>上面代码中，document节点的第一个元素子节点是<HTML>。</p><h2 id="ParentNode-lastElementChild"><a href="#ParentNode-lastElementChild" class="headerlink" title="ParentNode.lastElementChild"></a>ParentNode.lastElementChild</h2><p>lastElementChild属性返回当前节点的最后一个元素子节点，如果不存在任何元素子节点，则返回null。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.lastElementChild.nodeName</span><br><span class="line">// &quot;HTML&quot;</span><br></pre></td></tr></table></figure><p>上面代码中，document节点的最后一个元素子节点是<HTML>（因为document只包含这一个元素子节点）。</p><h2 id="ParentNode-childElementCount"><a href="#ParentNode-childElementCount" class="headerlink" title="ParentNode.childElementCount"></a>ParentNode.childElementCount</h2><p>childElementCount属性返回一个整数，表示当前节点的所有元素子节点的数目。如果不包含任何元素子节点，则返回0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.body.childElementCount // 13</span><br><span class="line">ParentNode.append()，ParentNode.prepend()</span><br></pre></td></tr></table></figure><p>append方法为当前节点追加一个或多个子节点，位置是最后一个元素子节点的后面。</p><p>该方法不仅可以添加元素子节点，还可以添加文本子节点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var parent = document.body;</span><br><span class="line"></span><br><span class="line">// 添加元素子节点</span><br><span class="line">var p = document.createElement(&#x27;p&#x27;);</span><br><span class="line">parent.append(p);</span><br><span class="line"></span><br><span class="line">// 添加文本子节点</span><br><span class="line">parent.append(&#x27;Hello&#x27;);</span><br><span class="line"></span><br><span class="line">// 添加多个元素子节点</span><br><span class="line">var p1 = document.createElement(&#x27;p&#x27;);</span><br><span class="line">var p2 = document.createElement(&#x27;p&#x27;);</span><br><span class="line">parent.append(p1, p2);</span><br><span class="line"></span><br><span class="line">// 添加元素子节点和文本子节点</span><br><span class="line">var p = document.createElement(&#x27;p&#x27;);</span><br><span class="line">parent.append(&#x27;Hello&#x27;, p);</span><br></pre></td></tr></table></figure><p>注意，该方法没有返回值。</p><p>prepend方法为当前节点追加一个或多个子节点，位置是第一个元素子节点的前面。它的用法与append方法完全一致，也是没有返回值。</p><h1 id="ChildNode-接口"><a href="#ChildNode-接口" class="headerlink" title="ChildNode 接口"></a>ChildNode 接口</h1><p>remove方法用于从父节点移除当前节点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">el.remove()</span><br></pre></td></tr></table></figure><p>上面代码在 DOM 里面移除了el节点。</p><h2 id="ChildNode-before-，ChildNode-after"><a href="#ChildNode-before-，ChildNode-after" class="headerlink" title="ChildNode.before()，ChildNode.after()"></a>ChildNode.before()，ChildNode.after()</h2><p>before方法用于在当前节点的前面，插入一个或多个同级节点。两者拥有相同的父节点。</p><p>注意，该方法不仅可以插入元素节点，还可以插入文本节点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var p = document.createElement(&#x27;p&#x27;);</span><br><span class="line">var p1 = document.createElement(&#x27;p&#x27;);</span><br><span class="line"></span><br><span class="line">// 插入元素节点</span><br><span class="line">el.before(p);</span><br><span class="line"></span><br><span class="line">// 插入文本节点</span><br><span class="line">el.before(&#x27;Hello&#x27;);</span><br><span class="line"></span><br><span class="line">// 插入多个元素节点</span><br><span class="line">el.before(p, p1);</span><br><span class="line"></span><br><span class="line">// 插入元素节点和文本节点</span><br><span class="line">el.before(p, &#x27;Hello&#x27;);</span><br></pre></td></tr></table></figure><p>after方法用于在当前节点的后面，插入一个或多个同级节点，两者拥有相同的父节点。用法与before方法完全相同。</p><h2 id="ChildNode-replaceWith"><a href="#ChildNode-replaceWith" class="headerlink" title="ChildNode.replaceWith()"></a>ChildNode.replaceWith()</h2><p>replaceWith方法使用参数节点，替换当前节点。参数可以是元素节点，也可以是文本节点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var span = document.createElement(&#x27;span&#x27;);</span><br><span class="line">el.replaceWith(span);</span><br></pre></td></tr></table></figure><p>上面代码中，el节点将被span节点替换。</p><h1 id="节点创建型api"><a href="#节点创建型api" class="headerlink" title="节点创建型api"></a>节点创建型api</h1><p>在这里，我将常用的DOM操作api进行分类，首先要介绍的是创建型的api。这一类型的api，简而言之就是用来创建节点的。</p><h2 id="createElement"><a href="#createElement" class="headerlink" title="createElement"></a><strong>createElement</strong></h2><p>createElement通过传入指定的一个标签名来创建一个元素，如果传入的标签名是一个未知的，则会创建一个自定义的标签，注意：IE8以下浏览器不支持自定义标签。<br>使用如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var div = document.createElement(&quot;div&quot;);</span><br></pre></td></tr></table></figure><p>使用createElement要注意：通过createElement创建的元素并不属于html文档，它只是创建出来，并未添加到html文档中，要调用appendChild或insertBefore等方法将其添加到HTML文档树中。</p><h2 id="createTextNode"><a href="#createTextNode" class="headerlink" title="createTextNode"></a><strong>createTextNode</strong></h2><p>createTextNode用来创建一个文本节点，用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var textNode = document.createTextNode(&quot;一个TextNode&quot;);</span><br></pre></td></tr></table></figure><p>createTextNode接收一个参数，这个参数就是文本节点中的文本，和createElement一样，创建后的文本节点也只是独立的一个节点，同样需要appendChild将其添加到HTML文档树中</p><h2 id="cloneNode"><a href="#cloneNode" class="headerlink" title="cloneNode"></a>cloneNode</h2><p>cloneNode是用来返回调用方法的节点的一个副本，它接收一个bool参数，用来表示是否复制子元素，使用如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var parent = document.getElementById(&quot;parentElement&quot;); </span><br><span class="line">var parent2 = parent.cloneNode(true);// 传入true</span><br><span class="line">parent2.id = &quot;parent2&quot;;</span><br></pre></td></tr></table></figure><p>这段代码通过cloneNode复制了一份parent元素，其中cloneNode的参数为true，表示parent的子节点也被复制，如果传入false，则表示只复制了parent节点。<br>我们看看这个例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;parent&quot;&gt;</span><br><span class="line">    我是父元素的文本</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;span&gt;</span><br><span class="line">        我是子元素</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;button id=&quot;btnCopy&quot;&gt;复制&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">var parent = document.getElementById(&quot;parent&quot;);</span><br><span class="line">document.getElementById(&quot;btnCopy&quot;).onclick = function()&#123;</span><br><span class="line">var parent2 = parent.cloneNode(true);</span><br><span class="line">parent2.id = &quot;parent2&quot;;</span><br><span class="line">document.body.appendChild(parent2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码很简单，主要是绑定button事件，事件内容是复制了一个parent，修改其id，然后添加到文档中。<br>这里有几点要注意：<br>（1）和createElement一样，cloneNode创建的节点只是游离有html文档外的节点，要调用appendChild方法才能添加到文档树中<br>（2）如果复制的元素有id，则其副本同样会包含该id，由于id具有唯一性，所以在复制节点后必须要修改其id<br>（3）调用接收的bool参数最好传入，如果不传入该参数，不同浏览器对其默认值的处理可能不同</p><p>除此之外，我们还有一个需要注意的点：<br>如果被复制的节点绑定了事件，则副本也会跟着绑定该事件吗？这里要分情况讨论：<br>（1）如果是通过addEventListener或者比如onclick进行绑定事件，则副本节点不会绑定该事件<br>（2）如果是内联方式绑定比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div onclick=&quot;showParent()&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>这样的话，副本节点同样会触发事件。</p><h2 id="createDocumentFragment"><a href="#createDocumentFragment" class="headerlink" title="createDocumentFragment"></a>createDocumentFragment</h2><p>createDocumentFragment方法用来创建一个DocumentFragment。在前面我们说到DocumentFragment表示一种轻量级的文档，它的作用主要是存储临时的节点用来准备添加到文档中。<br>createDocumentFragment方法主要是用于添加大量节点到文档中时会使用到。假设要循环一组数据，然后创建多个节点添加到文档中，比如示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&quot;list&quot;&gt;&lt;/ul&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;添加多项&quot; id=&quot;btnAdd&quot; /&gt;</span><br><span class="line"></span><br><span class="line">document.getElementById(&quot;btnAdd&quot;).onclick = function()&#123;</span><br><span class="line">var list = document.getElementById(&quot;list&quot;);</span><br><span class="line">for(var i = 0;i &lt; 100; i++)&#123;</span><br><span class="line">var li = document.createElement(&quot;li&quot;);</span><br><span class="line">li.textContent = i;</span><br><span class="line">list.appendChild(li);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码将按钮绑定了一个事件，这个事件创建了100个li节点，然后依次将其添加HTML文档中。这样做有一个缺点：每次一创建一个新的元素，然后添加到文档树中，这个过程会造成浏览器的回流。所谓回流简单说就是指元素大小和位置会被重新计算，如果添加的元素太多，会造成性能问题。这个时候，就是使用createDocumentFragment了。<br>DocumentFragment不是文档树的一部分，它是保存在内存中的，所以不会造成回流问题。我们修改上面的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(&quot;btnAdd&quot;).onclick = function()&#123;</span><br><span class="line">var list = document.getElementById(&quot;list&quot;);</span><br><span class="line">var fragment = document.createDocumentFragment();</span><br><span class="line"></span><br><span class="line">for(var i = 0;i &lt; 100; i++)&#123;</span><br><span class="line">  var li = document.createElement(&quot;li&quot;);</span><br><span class="line">li.textContent = i;</span><br><span class="line">fragment.appendChild(li);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list.appendChild(fragment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化后的代码主要是创建了一个fragment，每次生成的li节点先添加到fragment，最后一次性添加到list，大家可以看示例</p><h2 id="创建型API总结"><a href="#创建型API总结" class="headerlink" title="创建型API总结"></a>创建型API总结</h2><p>创建型api主要包括createElement，createTextNode，cloneNode和createDocumentFragment四个方法，需要注意下面几点：</p><ol><li>它们创建的节点只是一个孤立的节点，要通过appendChild添加到文档中</li><li>cloneNode要注意如果被复制的节点是否包含子节点以及事件绑定等问题</li><li>使用createDocumentFragment来解决添加大量节点时的性能问题</li></ol><h1 id="页面修改型API"><a href="#页面修改型API" class="headerlink" title="页面修改型API"></a>页面修改型API</h1><p>前面我们提到创建型api，它们只是创建节点，并没有真正修改到页面内容，而是要调用appendChild来将其添加到文档树中。我在这里将这类会修改到页面内容归为一类。<br>修改页面内容的api主要包括：appendChild，insertBefore，removeChild，replaceChild。</p><h2 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild"></a>appendChild</h2><p>appendChild我们在前面已经用到多次，就是将指定的节点添加到调用该方法的节点的子元素的末尾。调用方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parent.appendChild(child);</span><br></pre></td></tr></table></figure><p>child节点将会作为parent节点的最后一个子节点。<br>appendChild这个方法很简单，但是还有有一点需要注意：如果被添加的节点是一个页面中存在的节点，则执行后这个节点将会添加到指定位置，其原本所在的位置将移除该节点，也就是说不会同时存在两个该节点在页面上，相当于把这个节点移动到另一个地方。我们来看例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;child&quot;&gt;</span><br><span class="line">    要被添加的节点</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;div id=&quot;parent&quot;&gt;</span><br><span class="line">    要移动的位置</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;input id=&quot;btnMove&quot; type=&quot;button&quot; value=&quot;移动节点&quot; /&gt;</span><br><span class="line"></span><br><span class="line">document.getElementById(&quot;btnMove&quot;).onclick = function()&#123;</span><br><span class="line">var child = document.getElementById(&quot;child&quot;);</span><br><span class="line">document.getElementById(&quot;parent&quot;).appendChild(child);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码主要是获取页面上的child节点，然后添加到指定位置，可以看到原本的child节点被移动到parent中了。<br>这里还有一个要注意的点：如果child绑定了事件，被移动时，它依然绑定着该事件。</p><h2 id="insertBefore"><a href="#insertBefore" class="headerlink" title="insertBefore"></a>insertBefore</h2><p>insertBefore用来添加一个节点到一个参照节点之前，用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parentNode.insertBefore(newNode,refNode);</span><br></pre></td></tr></table></figure><p>parentNode表示新节点被添加后的父节点<br>newNode表示要添加的节点<br>refNode表示参照节点，新节点会添加到这个节点之前<br>我们来看这个例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;parent&quot;&gt;</span><br><span class="line">    父节点</span><br><span class="line">    &lt;div id=&quot;child&quot;&gt;</span><br><span class="line">        子元素</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; id=&quot;insertNode&quot; value=&quot;插入节点&quot; /&gt;</span><br><span class="line"></span><br><span class="line">var parent = document.getElementById(&quot;parent&quot;);</span><br><span class="line">var child = document.getElementById(&quot;child&quot;);</span><br><span class="line">document.getElementById(&quot;insertNode&quot;).onclick = function()&#123;</span><br><span class="line">var newNode = document.createElement(&quot;div&quot;);</span><br><span class="line">newNode.textContent = &quot;新节点&quot;</span><br><span class="line">parent.insertBefore(newNode,child);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码创建了一个新节点，然后添加到child节点之前。<br>和appendChild一样，如果插入的节点是页面上的节点，则会移动该节点到指定位置，并且保留其绑定的事件。</p><p>关于第二个参数参照节点还有几个注意的地方：</p><ol><li>refNode是必传的，如果不传该参数会报错</li><li>如果refNode是undefined或null，则insertBefore会将节点添加到子元素的末尾</li></ol><h2 id="removeChild"><a href="#removeChild" class="headerlink" title="removeChild"></a>removeChild</h2><p>removeChild顾名思义，就是删除指定的子节点并返回，用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var deletedChild = parent.removeChild(node);</span><br></pre></td></tr></table></figure><p>deletedChild指向被删除节点的引用，它等于node，被删除的节点仍然存在于内存中，可以对其进行下一步操作。<br>注意：如果被删除的节点不是其子节点，则程序将会报错。我们可以通过下面的方式来确保可以删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(node.parentNode)&#123;</span><br><span class="line">    node.parentNode.removeChild(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过节点自己获取节点的父节点，然后将自身删除。</p><h2 id="replaceChild"><a href="#replaceChild" class="headerlink" title="replaceChild"></a>replaceChild</h2><p>replaceChild用于使用一个节点替换另一个节点，用法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parent.replaceChild(newChild,oldChild);</span><br></pre></td></tr></table></figure><p>newChild是替换的节点，可以是新的节点，也可以是页面上的节点，如果是页面上的节点，则其将被转移到新的位置<br>oldChild是被替换的节点</p><p>页面修改型API总结<br>页面修改型api主要是这四个接口，要注意几个特点：</p><ol><li>不管是新增还是替换节点，如果新增或替换的节点是原本存在页面上的，则其原来位置的节点将被移除，也就是说同一个节点不能存在于页面的多个位置</li><li>节点本身绑定的事件会不会消失，会一直保留着。</li></ol><h1 id="节点查询型API"><a href="#节点查询型API" class="headerlink" title="节点查询型API"></a>节点查询型API</h1><p>节点查询型API也是非常常用的api，下面我们分别说明一下每一个api的使用。</p><h2 id="document-getElementById"><a href="#document-getElementById" class="headerlink" title="document.getElementById"></a>document.getElementById</h2><p>这个接口很简单，根据元素id返回元素，返回值是Element类型，如果不存在该元素，则返回null。<br>使用这个接口有几点要注意：</p><ol><li>元素的Id是大小写敏感的，一定要写对元素的id</li><li>HTML文档中可能存在多个id相同的元素，则返回第一个元素</li><li>只从文档中进行搜索元素，如果创建了一个元素并指定id，但并没有添加到文档中，则这个元素是不会被查找到的</li></ol><h2 id="document-getElementsByTagName"><a href="#document-getElementsByTagName" class="headerlink" title="document.getElementsByTagName"></a>document.getElementsByTagName</h2><p>这个接口根据元素标签名获取元素，返回一个即时的HTMLCollection类型，什么是即时的HTMLCollection类型呢？我们来看看这个示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;div1&lt;/div&gt;</span><br><span class="line">&lt;div&gt;div2&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;显示数量&quot; id=&quot;btnShowCount&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;新增div&quot; id=&quot;btnAddDiv&quot;/&gt;</span><br><span class="line"></span><br><span class="line">var divList = document.getElementsByTagName(&quot;div&quot;);</span><br><span class="line">document.getElementById(&quot;btnAddDiv&quot;).onclick = function()&#123;</span><br><span class="line">var div = document.createElement(&quot;div&quot;);</span><br><span class="line">div.textContent =&quot;div&quot; + (divList.length+1);</span><br><span class="line">document.body.appendChild(div);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">document.getElementById(&quot;btnShowCount&quot;).onclick = function()&#123;</span><br><span class="line">        alert(divList.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中有两个按钮，一个按钮是显示HTMLCollection元素的个数，另一个按钮可以新增一个div标签到文档中。前面提到HTMLCollcetion元素是即时的表示该集合是随时变化的，也就是是文档中有几个div，它会随时进行变化，当我们新增一个div后，再访问HTMLCollection时，就会包含这个新增的div。<br>使用document.getElementsByTagName这个方法有几点要注意：</p><ol><li>如果要对HTMLCollection集合进行循环操作，最好将其长度缓存起来，因为每次循环都会去计算长度，暂时缓存起来可以提高效率</li><li>如果没有存在指定的标签，该接口返回的不是null，而是一个空的HTMLCollection</li><li>“*”表示所有标签</li></ol><h2 id="document-getElementsByName"><a href="#document-getElementsByName" class="headerlink" title="document.getElementsByName"></a>document.getElementsByName</h2><p>getElementsByName主要是通过指定的name属性来获取元素，它返回一个即时的NodeList对象。<br>使用这个接口主要要注意几点：</p><ol><li>返回对象是一个即时的NodeList，它是随时变化的</li><li>在HTML元素中，并不是所有元素都有name属性，比如div是没有name属性的，但是如果强制设置div的name属性，它也是可以被查找到的</li><li>在IE中，如果id设置成某个值，然后传入getElementsByName的参数值和id值一样，则这个元素是会被找到的，所以最好不好设置同样的值给id和name</li></ol><h2 id="document-getElementsByClassName"><a href="#document-getElementsByClassName" class="headerlink" title="document.getElementsByClassName"></a>document.getElementsByClassName</h2><p>这个API是根据元素的class返回一个即时的HTMLCollection，用法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var elements = document.getElementsByClassName(names);</span><br></pre></td></tr></table></figure><p>这个接口有下面几点要注意：</p><ol><li>返回结果是一个即时的HTMLCollection，会随时根据文档结构变化</li><li>IE9以下浏览器不支持</li><li>如果要获取2个以上classname，可传入多个classname，每个用空格相隔，例如</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var elements = document.getElementsByClassName(&quot;test1 test2&quot;);</span><br></pre></td></tr></table></figure><p>document.querySelector和document.querySelectorAll<br>这两个api很相似，通过css选择器来查找元素，注意选择器要符合CSS选择器的规则。<br>首先来介绍一下document.querySelector。<br>document.querySelector返回第一个匹配的元素，如果没有匹配的元素，则返回null。<br>注意，由于返回的是第一个匹配的元素，这个api使用的深度优先搜索来获取元素。我们来看这个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;span class=&quot;test&quot;&gt;第三级的span&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;test&quot;&gt;</span><br><span class="line">    同级的第二个div</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; id=&quot;btnGet&quot; value=&quot;获取test元素&quot; /&gt;</span><br><span class="line"></span><br><span class="line">document.getElementById(&quot;btnGet&quot;).addEventListener(&quot;click&quot;,function()&#123;</span><br><span class="line">var element = document.querySelector(&quot;.test&quot;);</span><br><span class="line">alert(element.textContent);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这个例子很简单，就是两个class都包含“test”的元素，一个在文档树的前面，但是它在第三级，另一个在文档树的后面，但它在第一级，通过querySelector获取元素时，它通过深度优先搜索，拿到文档树前面的第三级的元素。</p><p>document.querySelectorAll的不同之处在于它返回的是所有匹配的元素，而且可以匹配多个选择符，我们来看看下面这个例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;test&quot;&gt;</span><br><span class="line">    class为test</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;test&quot;&gt;</span><br><span class="line">    id为test</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;input id=&quot;btnShow&quot; type=&quot;button&quot; value=&quot;显示内容&quot; /&gt;</span><br><span class="line"></span><br><span class="line">document.getElementById(&quot;btnShow&quot;).addEventListener(&quot;click&quot;,function()&#123;</span><br><span class="line">var elements = document.querySelectorAll(&quot;#test,.test&quot;);</span><br><span class="line">for(var i = 0,length = elements.length;i&lt;length;i++)&#123;</span><br><span class="line">alert(elements[i].textContent);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这段代码通过querySelectorAll，使用id选择器和class选择器选择了两个元素，并依次输出其内容。要注意两点：<br>（1）querySelectorAll也是通过深度优先搜索，搜索的元素顺序和选择器的顺序无关<br>（2）返回的是一个非即时的NodeList，也就是说结果不会随着文档树的变化而变化</p><p>兼容性问题：querySelector和querySelectorAll在ie8以下的浏览器不支持。</p><h1 id="节点关系型api"><a href="#节点关系型api" class="headerlink" title="节点关系型api"></a>节点关系型api</h1><p>在html文档中的每个节点之间的关系都可以看成是家谱关系，包含父子关系，兄弟关系等等，下面我们依次来看看每一种关系。</p><h2 id="父关系型api"><a href="#父关系型api" class="headerlink" title="父关系型api"></a>父关系型api</h2><ul><li>parentNode：每个节点都有一个parentNode属性，它表示元素的父节点。Element的父节点可能是Element，Document或DocumentFragment。</li><li>parentElement：返回元素的父元素节点，与parentNode的区别在于，其父节点必须是一个Element，如果不是，则返回null</li></ul><h2 id="兄弟关系型api"><a href="#兄弟关系型api" class="headerlink" title="兄弟关系型api"></a>兄弟关系型api</h2><ul><li><p>previousSibling：节点的前一个节点，如果该节点是第一个节点，则为null。注意有可能拿到的节点是文本节点或注释节点，与预期的不符，要进行处理一下。</p></li><li><p>previousElementSibling：返回前一个元素节点，前一个节点必须是Element，注意IE9以下浏览器不支持。</p></li><li><p>nextSibling：节点的后一个节点，如果该节点是最后一个节点，则为null。注意有可能拿到的节点是文本节点，与预期的不符，要进行处理一下。</p></li><li><p>nextElementSibling：返回后一个元素节点，后一个节点必须是Element，注意IE9以下浏览器不支持。</p></li></ul><h2 id="子关系型api"><a href="#子关系型api" class="headerlink" title="子关系型api"></a>子关系型api</h2><ul><li>childNodes：返回一个即时的NodeList，表示元素的子节点列表，子节点可能会包含文本节点，注释节点等。</li><li>children：一个即时的HTMLCollection，子节点都是Element，IE9以下浏览器不支持。</li><li>firstNode：第一个子节点</li><li>lastNode：最后一个子节点</li><li>hasChildNodes方法：可以用来判断是否包含子节点。</li></ul><h1 id="元素属性型api"><a href="#元素属性型api" class="headerlink" title="元素属性型api"></a>元素属性型api</h1><h2 id="setAttribute"><a href="#setAttribute" class="headerlink" title="setAttribute"></a>setAttribute</h2><p>setAttribute：根据名称和值修改元素的特性，用法如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.setAttribute(name, value);</span><br></pre></td></tr></table></figure><p>其中name是特性名，value是特性值。如果元素不包含该特性，则会创建该特性并赋值。<br>如果元素本身包含指定的特性名为属性，则可以世界访问属性进行赋值，比如下面两条代码是等价的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element.setAttribute(&quot;id&quot;,&quot;test&quot;);</span><br><span class="line"></span><br><span class="line">element.id = &quot;test&quot;;</span><br></pre></td></tr></table></figure><h2 id="getAttribute"><a href="#getAttribute" class="headerlink" title="getAttribute"></a>getAttribute</h2><p>getAttribute返回指定的特性名相应的特性值，如果不存在，则返回null或空字符串。用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var value = element.getAttribute(&quot;id&quot;);</span><br></pre></td></tr></table></figure><h1 id="元素样式型api"><a href="#元素样式型api" class="headerlink" title="元素样式型api"></a>元素样式型api</h1><h2 id="window-getComputedStyle"><a href="#window-getComputedStyle" class="headerlink" title="window.getComputedStyle"></a>window.getComputedStyle</h2><p>window.getComputedStyle是用来获取应用到元素后的样式，假设某个元素并未设置高度而是通过其内容将其高度撑开，这时候要获取它的高度就要用到getComputedStyle，用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var style = window.getComputedStyle(element[, pseudoElt]);</span><br></pre></td></tr></table></figure><p>element是要获取的元素，pseudoElt指定一个伪元素进行匹配。<br>返回的style是一个CSSStyleDeclaration对象。<br>通过style可以访问到元素计算后的样式</p><h2 id="getBoundingClientRect"><a href="#getBoundingClientRect" class="headerlink" title="getBoundingClientRect"></a>getBoundingClientRect</h2><p>getBoundingClientRect用来返回元素的大小以及相对于浏览器可视窗口的位置，用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var clientRect = element.getBoundingClientRect();</span><br></pre></td></tr></table></figure><p>clientRect是一个DOMRect对象，包含left，top，right，bottom，它是相对于可视窗口的距离，滚动位置发生改变时，它们的值是会发生变化的。除了IE9以下浏览器，还包含元素的height和width等数据，具体可查看链接。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><strong>参考资料</strong></h1><ul><li>阮一峰：<a href="https://wangdoc.com/javascript/dom/index.html">JavaScript教程</a></li><li>狼狼的蓝胖子：<a href="http://luopq.com/2015/11/30/javascript-dom/">Javascript操作DOM常用API总结</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型与原型链</title>
      <link href="/2019/04/06/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/2019/04/06/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<p><strong>再讲原型与原型链的前提下先讲些概念方便理解</strong></p><hr><h1 id="对象是什么"><a href="#对象是什么" class="headerlink" title="对象是什么"></a>对象是什么</h1><p>面向对象编程（Object Oriented Programming，缩写为 OOP）是目前主流的编程范式。它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。</p><p>每一个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务。对象可以复用，通过继承机制还可以定制。因此，面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发，比起由一系列函数或指令组成的传统的过程式编程（procedural programming），更适合多人合作的大型软件项目。</p><p>那么，“对象”（object）到底是什么？我们从两个层次来理解。</p><p>（1）对象是单个实物的抽象。</p><p>一本书、一辆汽车、一个人都可以是对象，一个数据库、一张网页、一个与远程服务器的连接也可以是对象。当实物被抽象成对象，实物之间的关系就变成了对象之间的关系，从而就可以模拟现实情况，针对对象进行编程。</p><p>（2）对象是一个容器，封装了属性（property）和方法（method）。</p><p>属性是对象的状态，方法是对象的行为（完成某种任务）。比如，我们可以把动物抽象为animal对象，使用“属性”记录具体是那一种动物，使用“方法”表示动物的某种行为（奔跑、捕猎、休息等等）。</p><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><p>面向对象编程的第一步，就是要生成对象。前面说过，对象是单个实物的抽象。通常需要一个模板，表示某一类实物的共同特征，然后对象根据这个模板生成。</p><p>典型的面向对象编程语言（比如 C++ 和 Java），都有“类”（class）这个概念。所谓“类”就是对象的模板，对象就是“类”的实例。但是，JavaScript 语言的对象体系，不是基于“类”的，而是基于构造函数（constructor）和原型链（prototype）。</p><p>JavaScript 语言使用构造函数（constructor）作为对象的模板。所谓”构造函数”，就是专门用来生成实例对象的函数。它就是对象的模板，描述实例对象的基本结构。一个构造函数，可以生成多个实例对象，这些实例对象都有相同的结构。</p><p>构造函数就是一个普通的函数，但是有自己的特征和用法。</p><p>var Vehicle = function () {<br>  this.price = 1000;<br>};<br>上面代码中，Vehicle就是构造函数。为了与普通函数区别，构造函数名字的第一个字母通常大写。</p><p>构造函数的特点有两个。</p><p>函数体内部使用了this关键字，代表了所要生成的对象实例。<br>生成对象的时候，必须使用new命令。<br>下面先介绍new命令。</p><h2 id="new-命令"><a href="#new-命令" class="headerlink" title="new 命令"></a>new 命令</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>new命令的作用，就是执行构造函数，返回一个实例对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var Vehicle = function () &#123;</span><br><span class="line">  this.price = 1000;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var v = new Vehicle();</span><br><span class="line">v.price // 1000</span><br></pre></td></tr></table></figure><p>上面代码通过new命令，让构造函数Vehicle生成一个实例对象，保存在变量v中。这个新生成的实例对象，从构造函数Vehicle得到了price属性。new命令执行时，构造函数内部的this，就代表了新生成的实例对象，this.price表示实例对象有一个price属性，值是1000。</p><p>使用new命令时，根据需要，构造函数也可以接受参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var Vehicle = function (p) &#123;</span><br><span class="line">  this.price = p;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>var v = new Vehicle(500);<br>new命令本身就可以执行构造函数，所以后面的构造函数可以带括号，也可以不带括号。下面两行代码是等价的，但是为了表示这里是函数调用，推荐使用括号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 推荐的写法</span><br><span class="line">var v = new Vehicle();</span><br><span class="line">// 不推荐的写法</span><br><span class="line">var v = new Vehicle;</span><br></pre></td></tr></table></figure><p>一个很自然的问题是，如果忘了使用new命令，直接调用构造函数会发生什么事？</p><p>这种情况下，构造函数就变成了普通函数，并不会生成实例对象。而且由于后面会说到的原因，this这时代表全局对象，将造成一些意想不到的结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var Vehicle = function ()&#123;</span><br><span class="line">  this.price = 1000;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var v = Vehicle();</span><br><span class="line">v // undefined</span><br><span class="line">price // 1000</span><br></pre></td></tr></table></figure><p>上面代码中，调用Vehicle构造函数时，忘了加上new命令。结果，变量v变成了undefined，而price属性变成了全局变量。因此，应该非常小心，避免不使用new命令、直接调用构造函数。</p><p>为了保证构造函数必须与new命令一起使用，一个解决办法是，构造函数内部使用严格模式，即第一行加上use strict。这样的话，一旦忘了使用new命令，直接调用构造函数就会报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Fubar(foo, bar)&#123;</span><br><span class="line">  &#x27;use strict&#x27;;</span><br><span class="line">  this._foo = foo;</span><br><span class="line">  this._bar = bar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Fubar()</span><br><span class="line">// TypeError: Cannot set property &#x27;_foo&#x27; of undefined</span><br></pre></td></tr></table></figure><p>上面代码的Fubar为构造函数，use strict命令保证了该函数在严格模式下运行。由于严格模式中，函数内部的this不能指向全局对象，默认等于undefined，导致不加new调用会报错（JavaScript 不允许对undefined添加属性）。</p><p>另一个解决办法，构造函数内部判断是否使用new命令，如果发现没有使用，则直接返回一个实例对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Fubar(foo, bar) &#123;</span><br><span class="line">  if (!(this instanceof Fubar)) &#123;</span><br><span class="line">    return new Fubar(foo, bar);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  this._foo = foo;</span><br><span class="line">  this._bar = bar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Fubar(1, 2)._foo // 1</span><br><span class="line">(new Fubar(1, 2))._foo // 1</span><br></pre></td></tr></table></figure><p>上面代码中的构造函数，不管加不加new命令，都会得到同样的结果。</p><h3 id="new-命令的原理"><a href="#new-命令的原理" class="headerlink" title="new 命令的原理"></a>new 命令的原理</h3><p>使用new命令时，它后面的函数依次执行下面的步骤。</p><p>创建一个空对象，作为将要返回的对象实例。<br>将这个空对象的原型，指向构造函数的prototype属性。<br>将这个空对象赋值给函数内部的this关键字。<br>开始执行构造函数内部的代码。<br>也就是说，构造函数内部，this指的是一个新生成的空对象，所有针对this的操作，都会发生在这个空对象上。构造函数之所以叫“构造函数”，就是说这个函数的目的，就是操作一个空对象（即this对象），将其“构造”为需要的样子。</p><p>如果构造函数内部有return语句，而且return后面跟着一个对象，new命令会返回return语句指定的对象；否则，就会不管return语句，返回this对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var Vehicle = function () &#123;</span><br><span class="line">  this.price = 1000;</span><br><span class="line">  return 1000;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">(new Vehicle()) === 1000</span><br><span class="line">// false</span><br></pre></td></tr></table></figure><p>上面代码中，构造函数Vehicle的return语句返回一个数值。这时，new命令就会忽略这个return语句，返回“构造”后的this对象。</p><p>但是，如果return语句返回的是一个跟this无关的新对象，new命令会返回这个新对象，而不是this对象。这一点需要特别引起注意。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var Vehicle = function ()&#123;</span><br><span class="line">  this.price = 1000;</span><br><span class="line">  return &#123; price: 2000 &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">(new Vehicle()).price</span><br><span class="line">// 2000</span><br></pre></td></tr></table></figure><p>上面代码中，构造函数Vehicle的return语句，返回的是一个新对象。new命令会返回这个对象，而不是this对象。</p><p>另一方面，如果对普通函数（内部没有this关键字的函数）使用new命令，则会返回一个空对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function getMessage() &#123;</span><br><span class="line">  return &#x27;this is a message&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var msg = new getMessage();</span><br><span class="line"></span><br><span class="line">msg // &#123;&#125;</span><br><span class="line">typeof msg // &quot;object&quot;</span><br></pre></td></tr></table></figure><p>上面代码中，getMessage是一个普通函数，返回一个字符串。对它使用new命令，会得到一个空对象。这是因为new命令总是返回一个对象，要么是实例对象，要么是return语句指定的对象。本例中，return语句返回的是字符串，所以new命令就忽略了该语句。</p><p>new命令简化的内部流程，可以用下面的代码表示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function _new(/* 构造函数 */ constructor, /* 构造函数参数 */ params) &#123;</span><br><span class="line">  // 将 arguments 对象转为数组</span><br><span class="line">  var args = [].slice.call(arguments);</span><br><span class="line">  // 取出构造函数</span><br><span class="line">  var constructor = args.shift();</span><br><span class="line">  // 创建一个空对象，继承构造函数的 prototype 属性</span><br><span class="line">  var context = Object.create(constructor.prototype);</span><br><span class="line">  // 执行构造函数</span><br><span class="line">  var result = constructor.apply(context, args);</span><br><span class="line">  // 如果返回结果是对象，就直接返回，否则返回 context 对象</span><br><span class="line">  return (typeof result === &#x27;object&#x27; &amp;&amp; result != null) ? result : context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 实例</span><br><span class="line">var actor = _new(Person, &#x27;张三&#x27;, 28);</span><br></pre></td></tr></table></figure><h1 id="原型对象概述"><a href="#原型对象概述" class="headerlink" title="原型对象概述"></a>原型对象概述</h1><h2 id="构造函数的缺点"><a href="#构造函数的缺点" class="headerlink" title="构造函数的缺点"></a>构造函数的缺点</h2><p>JavaScript 通过构造函数生成新对象，因此构造函数可以视为对象的模板。实例对象的属性和方法，可以定义在构造函数内部。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Cat (name, color) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.color = color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var cat1 = new Cat(&#x27;大毛&#x27;, &#x27;白色&#x27;);</span><br><span class="line"></span><br><span class="line">cat1.name // &#x27;大毛&#x27;</span><br><span class="line">cat1.color // &#x27;白色&#x27;</span><br></pre></td></tr></table></figure><p>上面代码中，Cat函数是一个构造函数，函数内部定义了name属性和color属性，所有实例对象（上例是cat1）都会生成这两个属性，即这两个属性会定义在实例对象上面。</p><p>通过构造函数为实例对象定义属性，虽然很方便，但是有一个缺点。同一个构造函数的多个实例之间，无法共享属性，从而造成对系统资源的浪费。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function Cat(name, color) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.color = color;</span><br><span class="line">  this.meow = function () &#123;</span><br><span class="line">    console.log(&#x27;喵喵&#x27;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var cat1 = new Cat(&#x27;大毛&#x27;, &#x27;白色&#x27;);</span><br><span class="line">var cat2 = new Cat(&#x27;二毛&#x27;, &#x27;黑色&#x27;);</span><br><span class="line"></span><br><span class="line">cat1.meow === cat2.meow</span><br><span class="line">// false</span><br></pre></td></tr></table></figure><p>上面代码中，cat1和cat2是同一个构造函数的两个实例，它们都具有meow方法。由于meow方法是生成在每个实例对象上面，所以两个实例就生成了两次。也就是说，每新建一个实例，就会新建一个meow方法。这既没有必要，又浪费系统资源，因为所有meow方法都是同样的行为，完全应该共享。</p><p>这个问题的解决方法，就是 JavaScript 的原型对象（prototype）。</p><h2 id="prototype-属性的作用"><a href="#prototype-属性的作用" class="headerlink" title="prototype 属性的作用"></a>prototype 属性的作用</h2><p>JavaScript 继承机制的设计思想就是，原型对象的所有属性和方法，都能被实例对象共享。也就是说，如果属性和方法定义在原型上，那么所有实例对象就能共享，不仅节省了内存，还体现了实例对象之间的联系。</p><p>下面，先看怎么为对象指定原型。JavaScript 规定，每个函数都有一个prototype属性，指向一个对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function f() &#123;&#125;</span><br><span class="line">typeof f.prototype // &quot;object&quot;</span><br></pre></td></tr></table></figure><p>上面代码中，函数f默认具有prototype属性，指向一个对象。</p><p>对于普通函数来说，该属性基本无用。但是，对于构造函数来说，生成实例的时候，该属性会自动成为实例对象的原型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Animal(name) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.color = &#x27;white&#x27;;</span><br><span class="line"></span><br><span class="line">var cat1 = new Animal(&#x27;大毛&#x27;);</span><br><span class="line">var cat2 = new Animal(&#x27;二毛&#x27;);</span><br><span class="line"></span><br><span class="line">cat1.color // &#x27;white&#x27;</span><br><span class="line">cat2.color // &#x27;white&#x27;</span><br></pre></td></tr></table></figure><p>上面代码中，构造函数Animal的prototype属性，就是实例对象cat1和cat2的原型对象。原型对象上添加一个color属性，结果，实例对象都共享了该属性。</p><p>原型对象的属性不是实例对象自身的属性。只要修改原型对象，变动就立刻会体现在所有实例对象上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Animal.prototype.color = &#x27;yellow&#x27;;</span><br><span class="line"></span><br><span class="line">cat1.color // &quot;yellow&quot;</span><br><span class="line">cat2.color // &quot;yellow&quot;</span><br></pre></td></tr></table></figure><p>上面代码中，原型对象的color属性的值变为yellow，两个实例对象的color属性立刻跟着变了。这是因为实例对象其实没有color属性，都是读取原型对象的color属性。也就是说，当实例对象本身没有某个属性或方法的时候，它会到原型对象去寻找该属性或方法。这就是原型对象的特殊之处。</p><p>如果实例对象自身就有某个属性或方法，它就不会再去原型对象寻找这个属性或方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat1.color = &#x27;black&#x27;;</span><br><span class="line"></span><br><span class="line">cat1.color // &#x27;black&#x27;</span><br><span class="line">cat2.color // &#x27;yellow&#x27;</span><br><span class="line">Animal.prototype.color // &#x27;yellow&#x27;;</span><br></pre></td></tr></table></figure><p>上面代码中，实例对象cat1的color属性改为black，就使得它不再去原型对象读取color属性，后者的值依然为yellow。</p><p>总结一下，原型对象的作用，就是定义所有实例对象共享的属性和方法。这也是它被称为原型对象的原因，而实例对象可以视作从原型对象衍生出来的子对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Animal.prototype.walk = function () &#123;</span><br><span class="line">  console.log(this.name + &#x27; is walking&#x27;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码中，Animal.prototype对象上面定义了一个walk方法，这个方法将可以在所有Animal实例对象上面调用。</p><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p>JavaScript 规定，所有对象都有自己的原型对象（prototype）。一方面，任何一个对象，都可以充当其他对象的原型；另一方面，由于原型对象也是对象，所以它也有自己的原型。因此，就会形成一个“原型链”（prototype chain）：对象到原型，再到原型的原型……</p><p>如果一层层地上溯，所有对象的原型最终都可以上溯到Object.prototype，即Object构造函数的prototype属性。也就是说，所有对象都继承了Object.prototype的属性。这就是所有对象都有valueOf和toString方法的原因，因为这是从Object.prototype继承的。</p><p>那么，Object.prototype对象有没有它的原型呢？回答是Object.prototype的原型是null。null没有任何属性和方法，也没有自己的原型。因此，原型链的尽头就是null。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object.getPrototypeOf(Object.prototype)</span><br><span class="line">// null</span><br></pre></td></tr></table></figure><p>上面代码表示，Object.prototype对象的原型是null，由于null没有任何属性，所以原型链到此为止。Object.getPrototypeOf方法返回参数对象的原型，具体介绍请看后文。</p><p>读取对象的某个属性时，JavaScript 引擎先寻找对象本身的属性，如果找不到，就到它的原型去找，如果还是找不到，就到原型的原型去找。如果直到最顶层的Object.prototype还是找不到，则返回undefined。如果对象自身和它的原型，都定义了一个同名属性，那么优先读取对象自身的属性，这叫做“覆盖”（overriding）。</p><p>注意，一级级向上，在整个原型链上寻找某个属性，对性能是有影响的。所寻找的属性在越上层的原型对象，对性能的影响越大。如果寻找某个不存在的属性，将会遍历整个原型链。</p><p>举例来说，如果让构造函数的prototype属性指向一个数组，就意味着实例对象可以调用数组方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var MyArray = function () &#123;&#125;;</span><br><span class="line"></span><br><span class="line">MyArray.prototype = new Array();</span><br><span class="line">MyArray.prototype.constructor = MyArray;</span><br><span class="line"></span><br><span class="line">var mine = new MyArray();</span><br><span class="line">mine.push(1, 2, 3);</span><br><span class="line">mine.length // 3</span><br><span class="line">mine instanceof Array // true</span><br></pre></td></tr></table></figure><p>上面代码中，mine是构造函数MyArray的实例对象，由于MyArray.prototype指向一个数组实例，使得mine可以调用数组方法（这些方法定义在数组实例的prototype对象上面）。最后那行instanceof表达式，用来比较一个对象是否为某个构造函数的实例，结果就是证明mine为Array的实例</p><h1 id="Object-prototype-proto"><a href="#Object-prototype-proto" class="headerlink" title="Object.prototype.proto"></a>Object.prototype.<strong>proto</strong></h1><p>实例对象的__proto__属性（前后各两个下划线），返回该对象的原型。该属性可读写。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;;</span><br><span class="line">var p = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">obj.__proto__ = p;</span><br><span class="line">Object.getPrototypeOf(obj) === p // true</span><br></pre></td></tr></table></figure><p>上面代码通过__proto__属性，将p对象设为obj对象的原型。</p><p>根据语言标准，__proto__属性只有浏览器才需要部署，其他环境可以没有这个属性。它前后的两根下划线，表明它本质是一个内部属性，不应该对使用者暴露。因此，应该尽量少用这个属性，而是用Object.getPrototypeof()和Object.setPrototypeOf()，进行原型对象的读写操作。</p><p>原型链可以用__proto__很直观地表示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var A = &#123;</span><br><span class="line">  name: &#x27;张三&#x27;</span><br><span class="line">&#125;;</span><br><span class="line">var B = &#123;</span><br><span class="line">  name: &#x27;李四&#x27;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var proto = &#123;</span><br><span class="line">  print: function () &#123;</span><br><span class="line">    console.log(this.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A.__proto__ = proto;</span><br><span class="line">B.__proto__ = proto;</span><br><span class="line"></span><br><span class="line">A.print() // 张三</span><br><span class="line">B.print() // 李四</span><br><span class="line"></span><br><span class="line">A.print === B.print // true</span><br><span class="line">A.print === proto.print // true</span><br><span class="line">B.print === proto.print // true</span><br></pre></td></tr></table></figure><p>上面代码中，A对象和B对象的原型都是proto对象，它们都共享proto对象的print方法。也就是说，A和B的print方法，都是在调用proto对象的print方法。</p><h1 id="获取原型对象方法的比较"><a href="#获取原型对象方法的比较" class="headerlink" title="获取原型对象方法的比较"></a>获取原型对象方法的比较</h1><p>如前所述，__proto__属性指向当前对象的原型对象，即构造函数的prototype属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var obj = new Object();</span><br><span class="line"></span><br><span class="line">obj.__proto__ === Object.prototype</span><br><span class="line">// true</span><br><span class="line">obj.__proto__ === obj.constructor.prototype</span><br><span class="line">// true</span><br></pre></td></tr></table></figure><p>上面代码首先新建了一个对象obj，它的__proto__属性，指向构造函数（Object或obj.constructor）的prototype属性。</p><p>因此，获取实例对象obj的原型对象，有三种方法。</p><ul><li>obj.<strong>proto</strong></li><li>obj.constructor.prototype</li><li>Object.getPrototypeOf(obj)</li></ul><p>上面三种方法之中，前两种都不是很可靠。__proto__属性只有浏览器才需要部署，其他环境可以不部署。而obj.constructor.prototype在手动改变原型对象时，可能会失效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var P = function () &#123;&#125;;</span><br><span class="line">var p = new P();</span><br><span class="line"></span><br><span class="line">var C = function () &#123;&#125;;</span><br><span class="line">C.prototype = p;</span><br><span class="line">var c = new C();</span><br><span class="line"></span><br><span class="line">c.constructor.prototype === p // false</span><br></pre></td></tr></table></figure><p>上面代码中，构造函数C的原型对象被改成了p，但是实例对象的c.constructor.prototype却没有指向p。所以，在改变原型对象时，一般要同时设置constructor属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C.prototype = p;</span><br><span class="line">C.prototype.constructor = C;</span><br><span class="line"></span><br><span class="line">var c = new C();</span><br><span class="line">c.constructor.prototype === p // true</span><br></pre></td></tr></table></figure><p>因此，推荐使用第三种Object.getPrototypeOf方法，获取原型对象。</p><p><strong>参考链接：阮一峰-<a href="https://wangdoc.com/javascript/">JavaScript教程</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS数组API运用相关代码总结</title>
      <link href="/2019/04/05/JS%E6%95%B0%E7%BB%84API%E8%BF%90%E7%94%A8%E7%9B%B8%E5%85%B3%E4%BB%A3%E7%A0%81%E6%80%BB%E7%BB%93/"/>
      <url>/2019/04/05/JS%E6%95%B0%E7%BB%84API%E8%BF%90%E7%94%A8%E7%9B%B8%E5%85%B3%E4%BB%A3%E7%A0%81%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="自己总结代码题"><a href="#自己总结代码题" class="headerlink" title="自己总结代码题"></a>自己总结代码题</h1><p>1.使得 students 按分数的高低从大到小排列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var students = [&#x27;小明&#x27;,&#x27;小红&#x27;,&#x27;小花&#x27;] var scores = &#123; 小明: 59, 小红: 99, 小花: 80 &#125; students.sort(???)</span><br></pre></td></tr></table></figure><p>请填写 ??? 使得 students 按分数的高低从大到小排列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function ( x , y ) &#123;</span><br><span class="line">    return scores[y]-scores[x]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a = [1,2,3,4,5,6,7,8,9]</span><br><span class="line">a.filter(???).map(???) // [4,16,36,64]</span><br></pre></td></tr></table></figure><ul><li>获取所有偶数</li><li>得到所有偶数的平方</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a.filter( function ( value , key ) &#123;</span><br><span class="line">    return value % 2 === 0</span><br><span class="line">    &#125;).map ( function ( value ) &#123;</span><br><span class="line">        return value * value</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>3.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a = [1,2,3,4,5,6,7,8,9]</span><br><span class="line">a.reduce(???,???)</span><br></pre></td></tr></table></figure><p>计算所有奇数的和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a.reduce(function(sum,b)&#123;</span><br><span class="line">    if( b % 2 !=0)&#123;</span><br><span class="line">        sum = sum + b</span><br><span class="line">    &#125;return sum</span><br><span class="line">    &#125;,0)</span><br></pre></td></tr></table></figure><p>数组求和，一般我们的想法都是去遍历数组各项，然后累加。<br>那就是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> function sumArr(arr)&#123;</span><br><span class="line">      var sum = 0;</span><br><span class="line">      for(var i = 0;i&lt;=arr.length;i++)&#123;</span><br><span class="line">    sum += arr[i];//前提是arr中各项是数字，而不是数字字符串</span><br><span class="line">//如果是数字字符串：sum += Number(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又或者是forEach遍历：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function sumArr(arr)&#123;</span><br><span class="line">        var sum = 0;</span><br><span class="line">        arr.forEach(function(val,index,arr)&#123;</span><br><span class="line">              sum += val;</span><br><span class="line">        &#125;)</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种比较黑科技的写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function sumArr(arr)&#123;</span><br><span class="line">        return eval(arr.join(&quot;+&quot;)) </span><br><span class="line">&#125;//直接把他变成各个数的加法运算字符串</span><br></pre></td></tr></table></figure><p>当然还有这种被人广泛称赞的函数式编程的写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function sumArr(arr)&#123;</span><br><span class="line">        return arr.reduce(function(prev,cur)&#123;</span><br><span class="line">            return prev + cur;</span><br><span class="line">        &#125;,0);</span><br><span class="line">&#125;</span><br><span class="line">//reduce方法有两个参数，一个是callbackfunction(回调函数)，</span><br><span class="line">//二是设置prev的初始类型和初始值</span><br></pre></td></tr></table></figure><h1 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h1><p>concat() 方法用于连接两个或多个数组。</p><p>该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayObject.concat(arrayX,arrayX,......,arrayX)</span><br></pre></td></tr></table></figure><p><strong>返回值</strong></p><p>返回一个新的数组。该数组是通过把所有 arrayX 参数添加到 arrayObject 中生成的。如果要进行 concat() 操作的参数是数组，那么添加的是数组中的元素，而不是数组。</p><h1 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h1><p>forEachfindIndex()方法返回满足回调条件的数组中第一个元素的索引。否则将返回1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach(function callback(currentValue, index, array) &#123;</span><br><span class="line">    //your iterator</span><br><span class="line">&#125;[, thisArg]);</span><br></pre></td></tr></table></figure><p>callback：回调函数。</p><p>currentValue：在数组中处理当前元素</p><p>index：在数组中处理当前元素的索引。</p><p>array：当前数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var a = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];</span><br><span class="line"></span><br><span class="line">a.forEach(function(element) &#123;</span><br><span class="line">    console.log(element);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// a</span><br><span class="line">// b</span><br><span class="line">// c</span><br></pre></td></tr></table></figure><h1 id="join"><a href="#join" class="headerlink" title="join"></a>join</h1><p>join()将数组中的所有元素(或类似数组的对象)连接到一个字符串中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.join()</span><br><span class="line">arr.join(separator)</span><br></pre></td></tr></table></figure><p>separator：分隔符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = [&#x27;Wind&#x27;, &#x27;Rain&#x27;, &#x27;Fire&#x27;];</span><br><span class="line">a.join();    // &#x27;Wind,Rain,Fire&#x27;</span><br><span class="line">a.join(&#x27;-&#x27;); // &#x27;Wind-Rain-Fire&#x27;</span><br></pre></td></tr></table></figure><h1 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h1><p>keys()方法返回一个新的数组迭代器对象，该对象包含数组中每个索引的键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.keys()</span><br></pre></td></tr></table></figure><h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><p>map()方法创建一个新的数组，该数组的结果是调用调用数组中的每个元素的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var new_array = arr.map(function callback(currentValue, index, array) &#123;</span><br><span class="line">    // Return element for new_array</span><br><span class="line">&#125;[, thisArg])</span><br></pre></td></tr></table></figure><h1 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h1><p>reduce()方法对累加器和数组中的每个元素(从左到右)使用一个函数，以将其还原为一个值</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS里的数据类型转换</title>
      <link href="/2019/04/04/JS%E9%87%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2019/04/04/JS%E9%87%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><p>本文分别讲下数据类型之间的相互转换</p><h2 id="转换为string"><a href="#转换为string" class="headerlink" title="转换为string"></a>转换为string</h2><p>1.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型.toString</span><br></pre></td></tr></table></figure><table><thead><tr><th>数据类型</th><th>string</th></tr></thead><tbody><tr><td>number</td><td>toString</td></tr><tr><td>boolean</td><td>toString</td></tr><tr><td>symbol</td><td>不研究</td></tr><tr><td>null</td><td>报错</td></tr><tr><td>undefined</td><td>报错</td></tr><tr><td>object</td><td>toString</td></tr><tr><td>2.</td><td></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据类型 + &#x27;&#x27;</span><br><span class="line">&#x27;&#x27; + 数据类型</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/04/5ca5b94a9b8fa.png" alt="clipboard.png"><br>3. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.String(/*数据类型*/)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/04/5ca5b9c09eeda.png" alt="clipboard.png"></p><h2 id="转换为boolean"><a href="#转换为boolean" class="headerlink" title="转换为boolean"></a>转换为boolean</h2><ol><li><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Boolean(/*数据类型*/)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/04/5ca5b9c09eeda.png" alt="clipboard.png"></p></li><li><p>因为!表示取反<br>!!表示负负得正</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!!/*数据类型*/</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/04/5ca5bb19da865.png" alt="clipboard.png"></p><h3 id="5个falsy值"><a href="#5个falsy值" class="headerlink" title="5个falsy值"></a>5个falsy值</h3></li></ol><ul><li>数字里只有0 NaN false</li><li>string中只有空字符串’’是false</li><li>null 和undefined 只有一个值，就是false</li><li>obiect 都是true,object包括数组和函数所以他们俩也是true<br><img src="https://i.loli.net/2019/04/04/5ca5bbea358f1.png" alt="clipboard.png"></li></ul><p><strong><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy">falsy参考链接</a></strong></p><h2 id="转换为number"><a href="#转换为number" class="headerlink" title="转换为number"></a>转换为number</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;1&#x27;--&gt;1</span><br></pre></td></tr></table></figure><ol><li><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Number(&#x27;1&#x27;)===1</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parseInt(&#x27;1&#x27;,10)===1//10表示十进制</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2019/04/04/5ca5c241a55ee.png" alt="clipboard.png"></li><li><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parseFloat(&#x27;1.23&#x27;)===1.23</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;1&#x27;-0===1</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2019/04/04/5ca5c0d2e34ae.png" alt="clipboard.png"></li><li><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+&#x27;1&#x27;===1</span><br><span class="line">+&#x27;-1&#x27;===-1</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2019/04/04/5ca5c1e8c6501.png" alt="clipboard.png"></li></ol><h2 id="转为null和undefined都只有一个值"><a href="#转为null和undefined都只有一个值" class="headerlink" title="转为null和undefined都只有一个值"></a>转为null和undefined都只有一个值</h2>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS里的数据类型</title>
      <link href="/2019/04/03/JS%E9%87%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/04/03/JS%E9%87%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="JS里的7种数据类型"><a href="#JS里的7种数据类型" class="headerlink" title="JS里的7种数据类型"></a>JS里的7种数据类型</h1><p><strong>JavaScript 语言的每一个值，都属于某一种数据类型。JavaScript 的数据类型，共有六种。（ES6 新增的第七种 Symbol 类型的值，不描述。）</strong></p><ul><li>数值（number）：整数和小数（比如1和3.14）</li><li>字符串（string）：文本（比如Hello World）。</li><li>布尔值（boolean）：表示真伪的两个特殊值，即true（真）和false（假）</li><li>undefined：表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值</li><li>null：表示空值，即此处的值为空。</li><li>对象（object）：各种值组成的集合。</li><li>Symbol（符号）：<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Symbol">https://developer.mozilla.org/zh-CN/docs/Glossary/Symbol</a></li></ul><p>string 表示可以用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27; &#x27;//空字符串</span><br><span class="line">&quot; &quot;//空字符串</span><br></pre></td></tr></table></figure><p>转义符号为\</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a = &quot;&#x27;&quot;//单引号</span><br><span class="line">var a = &#x27;&quot;&#x27;//双引号</span><br><span class="line">var a = &#x27;\&#x27;&#x27;//单引号</span><br><span class="line">var n = &#x27;\n&#x27;//回车</span><br><span class="line">var t = &#x27;\t&#x27;//Tab(制表符)</span><br><span class="line">var b = &#x27;\\&#x27;//表示\符号</span><br></pre></td></tr></table></figure><p><strong>多行字符串表示</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//不是字符串里有回车</span><br><span class="line">var s = &#x27;12345\</span><br><span class="line">         67890&#x27;//坑人语法不使用</span><br><span class="line">var s2 = &#x27;12345&#x27;       </span><br><span class="line">         &#x27;67890&#x27; //易报错5之后有看不见的空格</span><br></pre></td></tr></table></figure><p><strong>以上两种不建议使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var s3 = &#x27;12345&#x27;+</span><br><span class="line">         &#x27;67890&#x27;</span><br></pre></td></tr></table></figure><p>==建议使用这个语法==</p><p>在ES6中有个新的语法特性为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var s4 = &#x27;12345  //此处5后面有个回车</span><br><span class="line">67890&#x27;//实际为11个字符包含一个回车</span><br></pre></td></tr></table></figure><p><strong>关于null和undefined</strong></p><ol><li>变量没有值-undefined(语法)</li><li><blockquote><p>有一个对象objest，现在不想赋值-null</p></blockquote></li></ol><blockquote><p>有一个非对象，不想赋值-undefined</p></blockquote><p><strong>对象也是哈希表</strong><br>关于命名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person[&#x27;name&#x27;]</span><br><span class="line">person[name]</span><br><span class="line">person.name</span><br><span class="line">//下面两种符合标识符命名规则的情况下3种相等</span><br></pre></td></tr></table></figure><h1 id="typeof-运算符"><a href="#typeof-运算符" class="headerlink" title="typeof 运算符"></a>typeof 运算符</h1><p>JavaScript 有三种方法，可以确定一个值到底是什么类型。</p><p>typeof运算符<br>instanceof运算符<br>Object.prototype.toString方法<br>instanceof运算符和Object.prototype.toString方法。这里介绍typeof运算符。</p><p>typeof运算符可以返回一个值的数据类型。</p><p>数值、字符串、布尔值分别返回number、string、boolean。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typeof 123 // &quot;number&quot;</span><br><span class="line">typeof &#x27;123&#x27; // &quot;string&quot;</span><br><span class="line">typeof false // &quot;boolean&quot;</span><br></pre></td></tr></table></figure><p>函数返回function。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function f() &#123;&#125;</span><br><span class="line">typeof f</span><br><span class="line">// &quot;function&quot;</span><br></pre></td></tr></table></figure><p>undefined返回undefined。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">typeof undefined</span><br><span class="line">// &quot;undefined&quot;</span><br></pre></td></tr></table></figure><p>利用这一点，typeof可以用来检查一个没有声明的变量，而不报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v</span><br><span class="line">// ReferenceError: v is not defined</span><br><span class="line"></span><br><span class="line">typeof v</span><br><span class="line">// &quot;undefined&quot;</span><br></pre></td></tr></table></figure><p>上面代码中，变量v没有用var命令声明，直接使用就会报错。但是，放在typeof后面，就不报错了，而是返回undefined。</p><p>实际编程中，这个特点通常用在判断语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 错误的写法</span><br><span class="line">if (v) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line">// ReferenceError: v is not defined</span><br><span class="line"></span><br><span class="line">// 正确的写法</span><br><span class="line">if (typeof v === &quot;undefined&quot;) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象返回object。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typeof window // &quot;object&quot;</span><br><span class="line">typeof &#123;&#125; // &quot;object&quot;</span><br><span class="line">typeof [] // &quot;object&quot;</span><br></pre></td></tr></table></figure><p>上面代码中，空数组（[]）的类型也是object，这表示在 JavaScript 内部，数组本质上只是一种特殊的对象。这里顺便提一下，instanceof运算符可以区分数组和对象。instanceof运算符的详细解释，请见《面向对象编程》一章。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var o = &#123;&#125;;</span><br><span class="line">var a = [];</span><br><span class="line"></span><br><span class="line">o instanceof Array // false</span><br><span class="line">a instanceof Array // true</span><br><span class="line">null返回object。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typeof null // &quot;object&quot;</span><br></pre></td></tr></table></figure><p>null的类型是object，这是由于历史原因造成的。1995年的 JavaScript 语言第一版，只设计了五种数据类型（对象、整数、浮点数、字符串和布尔值），没考虑null，只把它当作object的一种特殊值。后来null独立出来，作为一种单独的数据类型，为了兼容以前的代码，typeof null返回object就没法改变了。</p><p><strong>参考链接</strong></p><ul><li>阮一峰，<a href="https://wangdoc.com/javascript/types/general.html">JavaScript教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS布局</title>
      <link href="/2019/03/20/CSS%E5%B8%83%E5%B1%80/"/>
      <url>/2019/03/20/CSS%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS布局"><a href="#CSS布局" class="headerlink" title="CSS布局"></a>CSS布局</h2><h2 id="float-布局"><a href="#float-布局" class="headerlink" title="float 布局"></a>float 布局</h2><p>float 布局应该是目前各大网站用的最多的一种布局方式了，但是也特别复杂，这里详细讲一下</p><p>首先，什么是浮动？</p><p>浮动元素是脱离文档流的，但不脱离文本流，这是什么意思呢，用过 word 的应该知道有一种图片环绕的方式是文字环绕吧，就是这种效果。</p><p>那么它有什么特点呢</p><ul><li>对自身的影响 <ul><li>float 元素可以形成块，如 span元素。可以让行内元素也拥有宽和高，因为块级元素具有宽高</li><li>浮动元素的位置尽量靠上</li><li>尽量靠左（float:left）或右（float:right），如果那一行满足不了浮动元素的宽度要求，则元素会往下掉</li></ul></li><li>对兄弟元素的影响 <ul><li>不影响其他块级元素的位置</li><li>影响其他块级元素的文本</li><li>上面贴非 float 元素</li><li>旁边贴 float 元素或者边框</li></ul></li><li>对父级元素的影响 <ul><li>从布局上 “消失”</li><li>高度塌陷</li></ul></li></ul><p>如果有以下html结构，设置<strong>左右两栏布</strong>局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;leftChild&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;rightChild&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>设置浮动</strong>：左右布局常用的方法就是为子元素设置浮动，然后在其<strong>父元素上使用clearfix类</strong>清除浮动。示例代码如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.clearfix::after&#123;</span><br><span class="line">  content:&quot;&quot;;</span><br><span class="line">  display:block;</span><br><span class="line">  clear:both;</span><br><span class="line">&#125;</span><br><span class="line">.leftChild,</span><br><span class="line">.rightChild&#123;</span><br><span class="line">  float:left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>设置position</strong>绝对定位，为父元素设置position:relative; 为子元素设置position:absolute 。示例代码如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.parent&#123;</span><br><span class="line">  position:relative;</span><br><span class="line">&#125;</span><br><span class="line">.leftChild&#123;</span><br><span class="line">  position:absolute;</span><br><span class="line">  left:0;</span><br><span class="line">  top:0;</span><br><span class="line">&#125;</span><br><span class="line">.rightChild&#123;</span><br><span class="line">  position:absolute;</span><br><span class="line">  left:200px;</span><br><span class="line">  top:0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>三栏布局</strong></p><p>左中右布局主要方法也是浮动或者绝对定位，不过可以分情况选择其一使用甚至结合使用。</p><p>三栏布局，思路主要是左边一个浮动元素，右边一个浮动元素。这里有个小问题，中间的元素要写在最后，因为中间元素假设有块级元素的话，会影响右边浮动元素的定位，这里演示一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;CSS 布局&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">*&#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">.container&#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 200px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.left&#123;</span><br><span class="line">    background-color: yellow; </span><br><span class="line">    float: left;</span><br><span class="line">    height: 100%;</span><br><span class="line">    width:100px;</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">    background-color: green; </span><br><span class="line">    float: right;</span><br><span class="line">    height: 100%;</span><br><span class="line">    width:100px;</span><br><span class="line">&#125;</span><br><span class="line">.middle&#123;</span><br><span class="line">    background-color: red; </span><br><span class="line">    margin-left: 100px;</span><br><span class="line">    margin-right: 100px;</span><br><span class="line">    height:100%;</span><br><span class="line">&#125;</span><br><span class="line">.container::after&#123;</span><br><span class="line">    content: &#x27;&#x27;;</span><br><span class="line">    display: block;</span><br><span class="line">    visibility: hidden;</span><br><span class="line">    clear: both</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=container&gt;       </span><br><span class="line">        &lt;div class=left&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;middle&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=right&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>因为浮动元素会把块级元素的位置空出来，所以这里右边的浮动元素把上面的位置空了下来，所以正确的写法应该是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=container&gt;       </span><br><span class="line">        &lt;div class=left&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=right&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;middle&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>特定情况下使用浮动还是绝对定位</strong></p><ul><li>使用浮动时：不需要计算特别精确的位置，不过不易操控，浮动元素的宽度需要注意，否则会换行展示，适用于导航栏等地方。</li><li>使用绝对定位：需要计算元素的具体位置，不过更加准确，易于操控。</li><li>当某些元素的位置要根据父元素的大小自适应，内容宽度无法确定时，建议使用浮动</li><li>当特定元素的位置是相对父元素固定，或者内容宽高确定，需要精确定位甚至以后要用js操作变换位置时，建议使用浮动</li></ul><h2 id="关于居中"><a href="#关于居中" class="headerlink" title="关于居中"></a>关于居中</h2><p><strong>水平居中</strong></p><ul><li>文字的水平居中</li></ul><p>将一段文字置于容器的水平中点，只要设置text-align属性即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　text-align:center;</span><br></pre></td></tr></table></figure><ul><li>容器的水平居中</li></ul><p>先为该容器设置一个明确宽度，然后将margin的水平值设为auto即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">　　div#container &#123;</span><br><span class="line">　　　　width:760px;</span><br><span class="line">　　　　margin:0 auto;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p><strong>垂直居中</strong></p><ul><li>文字的垂直居中</li></ul><p>单行文字的垂直居中，只要将行高与容器高设为相等即可。</p><p>比如，容器中有一行数字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　&lt;div id=&quot;container&quot;&gt;1234567890&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>然后CSS这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div#container &#123;height: 35px; line-height: 35px;&#125;</span><br></pre></td></tr></table></figure><ul><li>容器的垂直居中</li></ul><p>比如，有一大一小两个容器，请问如何将小容器垂直居中？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">　　&lt;div id=&quot;big&quot;&gt;</span><br><span class="line">　　　　&lt;div id=&quot;small&quot;&gt;</span><br><span class="line">　　　　&lt;/div&gt;</span><br><span class="line">　　&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>首先，将大容器的定位为relative。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">　　div#big&#123;</span><br><span class="line">　　　　position:relative;</span><br><span class="line">　　　　height:480px;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>然后，将小容器定位为absolute，再将它的左上角沿y轴下移50%，最后将它margin-top上移本身高度的50%即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">　　div#small &#123;</span><br><span class="line">　　　　position: absolute;</span><br><span class="line">　　　　top: 50%;</span><br><span class="line">　　　　height: 240px;</span><br><span class="line">　　　　margin-top: -120px;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>使用同样的思路，也可以做出水平居中的效果。</p><h3 id="关于CSS布局的小技巧"><a href="#关于CSS布局的小技巧" class="headerlink" title="关于CSS布局的小技巧"></a>关于CSS布局的小技巧</h3><p><strong>图片宽度的自适应</strong></p><p>如何使得较大的图片，能够自动适应小容器的宽度？CSS可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img &#123;max-width: 100%&#125;</span><br></pre></td></tr></table></figure><p><strong>CSS的优先性</strong></p><p>如果同一个容器被多条CSS语句定义，那么哪一个定义优先呢？</p><p>基本规则是：</p><p><strong>行内样式 &gt; id样式 &gt; class样式 &gt; 标签名样式</strong></p><p>比如，有一个元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;ID&quot; class=&quot;CLASS&quot; style=&quot;color:black;&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>行内样式是最优先的，然后其他设置的优先性，从低到高依次为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">div &lt; .class &lt; div.class &lt; #id &lt; div#id &lt; #id.class &lt; div#id.class</span><br></pre></td></tr></table></figure><p><strong>用图片充当列表标志</strong></p><p>默认情况下，浏览器使用一个黑圆圈作为列表标志，可以用图片取代它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">　　ul &#123;list-style: none&#125;</span><br><span class="line"></span><br><span class="line">　　ul li &#123; </span><br><span class="line">　　　　background-image: url(&quot;path-to-your-image&quot;); </span><br><span class="line">　　　　background-repeat: none; </span><br><span class="line">　　　　background-position: 0 0.5em; </span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p><strong>透明</strong></p><p>将一个容器设为透明，可以使用下面的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">　　.element &#123; </span><br><span class="line">　　　　filter:alpha(opacity=50); </span><br><span class="line">　　　　-moz-opacity:0.5; </span><br><span class="line">　　　　-khtml-opacity: 0.5; </span><br><span class="line">　　　　opacity: 0.5; </span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p><strong>CSS三角形</strong></p><p>如何使用CSS生成一个三角形？</p><p>先编写一个空元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;triangle&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>然后，将它四个边框中的三个边框设为透明，剩下一个设为可见，就可以生成三角形效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">　　.triangle &#123; </span><br><span class="line">　　　　border-color: transparent transparent green transparent; </span><br><span class="line">　　　　border-style: solid; </span><br><span class="line">　　　　border-width: 0px 300px 300px 300px; </span><br><span class="line">　　　　height: 0px; </span><br><span class="line">　　　　width: 0px; </span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>其他图形可以用同样的道理画出。</p><p><strong>CSS提示框</strong><br>当鼠标移动到链接上方，会自动出现一个提示框。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a class=&quot;tooltip&quot; href=&quot;#&quot;&gt;链接文字 &lt;span&gt;提示文字&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>CSS这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">　　a.tooltip &#123;position: relative&#125; </span><br><span class="line">　　a.tooltip span &#123;display:none; padding:5px; width:200px;&#125; </span><br><span class="line">　　a:hover &#123;background:#fff;&#125; /*background-color is a must for IE6*/ </span><br><span class="line">　　a.tooltip:hover span&#123;display:inline; position:absolute;&#125;</span><br></pre></td></tr></table></figure><p><strong>固定位置的页首</strong></p><p>当页面滚动时，有时需要页首在位置固定不变，CSS语句可以这样写，效果参见<a href="http://limpid.nl/lab/css/fixed/header%EF%BC%9A">http://limpid.nl/lab/css/fixed/header：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">　　body&#123; margin:0;padding:100px 0 0 0;&#125;</span><br><span class="line"></span><br><span class="line">　　div#header&#123;</span><br><span class="line">　　　　position:absolute;</span><br><span class="line">　　　　top:0;</span><br><span class="line">　　　　left:0;</span><br><span class="line">　　　　width:100%;</span><br><span class="line">　　　　height:&lt;length&gt;;</span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　@media screen&#123;</span><br><span class="line">　　　　body&gt;div#header&#123;position: fixed;&#125;</span><br><span class="line">　　&#125;</span><br><span class="line"></span><br><span class="line">　　* html body&#123;overflow:hidden;&#125;</span><br><span class="line"></span><br><span class="line">　　* html div#content&#123;height:100%;overflow:auto;&#125;</span><br></pre></td></tr></table></figure><p><strong>容器的水平和垂直居中</strong></p><p>HTML代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;figure class=&#x27;logo&#x27;&gt;</span><br><span class="line"></span><br><span class="line">　&lt;span&gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">　&lt;img class=&#x27;photo&#x27;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/figure&gt;</span><br></pre></td></tr></table></figure><p>CSS代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.logo &#123;</span><br><span class="line">　　　　display: block;</span><br><span class="line">　　　　text-align: center;</span><br><span class="line">　　　　display: block;</span><br><span class="line">　　　　text-align: center;</span><br><span class="line">　　　　vertical-align: middle;</span><br><span class="line">　　　　border: 4px solid #dddddd;</span><br><span class="line">　　　　padding: 4px;</span><br><span class="line">　　　　height: 74px;</span><br><span class="line">　　　　width: 74px; &#125;</span><br><span class="line"></span><br><span class="line">　　.logo * &#123;</span><br><span class="line">　　　　display: inline-block;</span><br><span class="line">　　　　height: 100%;</span><br><span class="line">　　　　vertical-align: middle; &#125;</span><br><span class="line"></span><br><span class="line">　　.logo .photo &#123;</span><br><span class="line">　　　　height: auto;</span><br><span class="line">　　　　width: auto;</span><br><span class="line">　　　　max-width: 100%;</span><br><span class="line">　　　　max-height: 100%; &#125;</span><br></pre></td></tr></table></figure><hr><p><strong>本博客相关内容出处来自阮一峰的博客</strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用CSS画一个太极</title>
      <link href="/2019/03/19/%E5%A6%82%E4%BD%95%E7%94%A8CSS%E7%94%BB%E4%B8%80%E4%B8%AA%E5%A4%AA%E6%9E%81/"/>
      <url>/2019/03/19/%E5%A6%82%E4%BD%95%E7%94%A8CSS%E7%94%BB%E4%B8%80%E4%B8%AA%E5%A4%AA%E6%9E%81/</url>
      
        <content type="html"><![CDATA[<p>本文将介绍如何用CSS画一个太极图</p><p><img src="https://css-tricks.com/wp-content/uploads/2017/06/sym_yin_yang_static.svg" alt="image"></p><p>首先 画一个方块黑白各一半</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  background-color: lightslategray;</span><br><span class="line">&#125;</span><br><span class="line">.yy &#123;</span><br><span class="line">  width: 0px;</span><br><span class="line">  height: 600px;</span><br><span class="line">  border-left: 300px solid black;</span><br><span class="line">  border-right: 300px solid white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图<br><img src="https://github.com/808Mak1r/yinyang-demo/blob/master/img/1.jpg?raw=true" alt="image"></p><p>再画白色部分的园（先画方块）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.yy::before &#123;</span><br><span class="line">  content: &#x27;&#x27;;</span><br><span class="line">  display: block;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  border: 100px solid black ;</span><br><span class="line">  border-image-repeat: </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图<br><img src="https://github.com/808Mak1r/yinyang-demo/blob/master/img/2.jpg?raw=true" alt="image"></p><p>再设置它的半径为100%</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border-image-repeat: </span><br></pre></td></tr></table></figure><p>图3<br><img src="https://github.com/808Mak1r/yinyang-demo/blob/master/img/3.jpg?raw=true" alt="image"></p><p>再让圆居中对齐</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">background-color: white;</span><br><span class="line">margin-left: -150px;</span><br></pre></td></tr></table></figure><p>图4</p><p><img src="https://github.com/808Mak1r/yinyang-demo/blob/master/img/4%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.jpg?raw=true" alt="image"></p><p>接下来在白色下面画一个宽高100px的方块，在上面加一个100px白色的外框，和上面一样让它的半径100%再加上黑色的背景色，一个小黑球就完成了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.yy::after &#123;</span><br><span class="line">  content: &#x27;&#x27;;</span><br><span class="line">  display: block;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  border: 100px solid white;</span><br><span class="line">  border-radius: 100%;</span><br><span class="line">  background-color: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图5</p><p><img src="https://github.com/808Mak1r/yinyang-demo/blob/master/img/5%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.jpg?raw=true" alt="image"></p><p>然后同理让整个图的半径100%就变成圆了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  background-color: lightslategray;</span><br><span class="line">&#125;</span><br><span class="line">.yy &#123;</span><br><span class="line">  width: 0px;</span><br><span class="line">  height: 600px;</span><br><span class="line">  border-left: 300px solid black;</span><br><span class="line">  border-right: 300px solid white;</span><br><span class="line">  border-radius: 100%;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">  margin-left: auto;</span><br><span class="line">  margin-right: auto;</span><br><span class="line">  margin-bottom: auto;</span><br><span class="line">&#125;</span><br><span class="line">.yy::before &#123;</span><br><span class="line">  content: &#x27;&#x27;;</span><br><span class="line">  display: block;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  border: 100px solid black ;</span><br><span class="line">  border-radius: 100%;</span><br><span class="line">  background-color: white;</span><br><span class="line">  margin-left: -150px;</span><br><span class="line">&#125;</span><br><span class="line">.yy::after &#123;</span><br><span class="line">  content: &#x27;&#x27;;</span><br><span class="line">  display: block;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  border: 100px solid white;</span><br><span class="line">  border-radius: 100%;</span><br><span class="line">  background-color: black;</span><br><span class="line">  margin-left: -150px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML常用标签</title>
      <link href="/2019/03/17/HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/"/>
      <url>/2019/03/17/HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-HTML5头部结构"><a href="#1-HTML5头部结构" class="headerlink" title="1.HTML5头部结构"></a>1.HTML5头部结构</h1><p>【DOCTYPE html】<br>声明文档类型为HTML5文件。<br>文档声明在HTML5文档必不可少，且必须放在文档的第一行。</p><p>【meta标签】<br>1-charset属性：单独使用，设置文档字符及编码格式。<br>写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>常见的中文编码格式：<br>B-2312:国标码，简体中文<br>GBK：扩展的国标编码，简体中文<br>UTF-8:万国码 Unicode码，基本兼容各国语言<br>2-http-equiv属性：需配合content属性使用。主要声明浏览器如何解释编译文件。<br>写法：```html</p><meta http-equiv="属性值" content="属性值详细内容"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">常用属性值：Content-Type HTML4.01之前的文档内容编码声明。</span><br><span class="line">refresh 网页刷新</span><br><span class="line">set-Cookie 设置浏览器cookie缓存</span><br><span class="line">3-name属性：需配合content属性使用，主要用于给搜索引擎提供必要信息。</span><br><span class="line">写法：```html</span><br><span class="line">&lt;meta name=&quot;属性值&quot; content=&quot;属性值详细内容&quot;&gt;</span><br></pre></td></tr></table></figure>重要属性值：author 作者，声明网站作者，常用公司网址表示keywords 网站关键字，多个关键字，用英文逗号分隔description 网页描述，搜索引擎显示在title下的描述内容☆☆http-equiv和name属性，必须与content属性配合使用，前两者只是用于声明即将修改哪些属性值，而实际的属性值内容，在content中描述。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--charset属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--作者--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;anthor&quot;</span> <span class="attr">contet</span>=<span class="string">&quot;http://www.yt4561761.com&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--网页关键字--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML5,网页，第一个&quot;</span></span></span><br><span class="line"><span class="tag">&lt;!<span class="attr">--</span>网页描述<span class="attr">--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">我的第一个网页</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--声明文档的编码格式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>  <p>【link标签】<br>1-作用：用于为网页链接各种文件。<br>2-常用属性：<br>rel：用于表明被链接文件与当前文件关系。icon表明被链接图片是当前网页的icon图标。<br>type：表明被链接文件是什么类型，可省略。<br>href：表明链接文件的地址。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;img/icon.png&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>【title标签】<br>网页的标题，即网页选项卡上的文字。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>111<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.常见的块级标签</p><p>【常见的块级标签】</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">标题标签<span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>...<span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">水平线<span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">段落<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">换行<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">引用&lt;blockquote<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line">预格式<span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">引用标签```<span class="tag">&lt;<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line">表明标签中的文字，为引用的内容，浏览器显示为等宽字体，并缩进。</span><br><span class="line">cite属性，表明引用的来源，一般为引用的网址URL</span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">cite</span>=<span class="string">&quot;http：//www.yt4561761.com&quot;</span>&gt;</span>dfdsfsdfd<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span> </span><br><span class="line">预格式标签<span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">浏览器解析时，会按照等宽字体显示，并保留标签内的空格和回车。</span><br><span class="line">常用于保留代码格式。</span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>yt4561761yt4561761yt4561761<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【有序列表ol order list】</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【无序列表ul unorder list】</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【定义描述列表】</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述项<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>一般情况下，标题dt只有一项。描述项dd可以有多项。<br>浏览器显示时，标题顶格显示，dd缩进显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>这是dl列表的标题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述项1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述项2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述项3<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【图片组合标签figure】</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1-<span class="tag">&lt;<span class="name">figure</span>&gt;</span><span class="tag">&lt;/<span class="name">figure</span>&gt;</span>标签有两个子标签：</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span>:一幅图片，src表示图片的路径。</span><br><span class="line"><span class="tag">&lt;<span class="name">figcaption</span>&gt;</span><span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span>：图片的标题</span><br><span class="line">2-浏览器显示为：图片与标题上下排列，且整体向后缩进一个单位。</span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/icon.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>asd</span><br><span class="line"><span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【分区标签div】<br>常配合CSS使用，为网页中最常用的分区标签，常用于网页布局使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width：100%; height：100px; &quot;</span>&gt;</span></span><br><span class="line">这是div里面的文字</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>div里面的标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.常见的行级标签</p><p>【常见的行级标签】<br>span 文本<br>img 图片<br>em 强调<br>strong 强调<br>q 短引用<br>a 超链接<br>i 倾斜<br>b 加粗<br>small 缩小字体<br>u 下划线</p><p>span（文本）：用于包裹一部分文字，进行特定样式的修改。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:red; font-size:36px;&quot;</span>&gt;</span>酷<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>em（强调）：浏览器显示为倾斜。<br>strong（强调）：浏览器显示为加粗。</p><p>【strong/em/i/b 标签的区别】<br>1-em和strong都表示强调，strong&gt;em,strong和em标签均可多层嵌套，表示强调程度的递增。<br>2-em和i都能倾斜，Strong和b都能加粗。但是Strong和em多了一层强调的语义。可以帮助搜索 引擎快速抓取网站重点。且html5要求开发者尽可能实现代码的语义化。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>我真踏马帅！！<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>我真籍八帅！！<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>我被i标签弄斜了<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>我被b标签弄粗了<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>【q(短引用)】常用于一句话的引用，cite属性表示引用来源，浏览器解析时，会在内容的前后插入双引号。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q</span> <span class="attr">cite</span>=<span class="string">&quot;www.yt4561761.com&quot;</span>&gt;</span>那你很棒哦<span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br></pre></td></tr></table></figure><p>small（缩小字体）：small标签可多层嵌套，表示比默认字体小一号，直到小到最小号为止。</p><p>big（放大字体）：亦可多层嵌套，直到最大。<br>但在最新规范中，small和big标签不提倡使用。提倡使用style=”font-size:11px;”CSS样式替代。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>那你很<span class="tag">&lt;<span class="name">big</span>&gt;</span><span class="tag">&lt;<span class="name">big</span>&gt;</span><span class="tag">&lt;<span class="name">big</span>&gt;</span><span class="tag">&lt;<span class="name">big</span>&gt;</span><span class="tag">&lt;<span class="name">big</span>&gt;</span>棒<span class="tag">&lt;/<span class="name">big</span>&gt;</span><span class="tag">&lt;/<span class="name">big</span>&gt;</span><span class="tag">&lt;/<span class="name">big</span>&gt;</span><span class="tag">&lt;/<span class="name">big</span>&gt;</span><span class="tag">&lt;/<span class="name">big</span>&gt;</span>哦！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>【img 图片标签】<br>1-src属性：表示图片引用路径。<br>常见路径的写法：<br>①相对路径：<br>Ⅰ -当图片在当前文件下一层时：文件夹名/图片名 例如：img/abc.jpg<br>Ⅱ-当图片与当前文件在同一层时：图片名 例如：src=”abc.jpg”<br>Ⅲ-当图片在当前文件上一层时：../图片名 例如：src=”../abc.jpg”<br>使用相对路径时，图片最外层只能放到网站根目录（图片必须要在项目文件夹中）<br>②绝对路径：写法file：///E:/aaa.png 但是，严禁使用<br>③网络连接：直接使用图片的网络地址，但由于图片在别的服务器，不可控，故不建议使用<br>2-title:图片的标题。当鼠标指上时，显示的提示文字。<br>3-alt：当图片无法加载时显示的文字。<br>4-width/height:图片的尺寸，相当于CSS中的style=”width:”<br>5-align:图片周围的文字，相对于图片的排列方式。可选值：top/center/bottm</p><p>4.表格标签</p><p>【table】</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span>表格框</span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>表格行</span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>表格列</span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span>表格标题列（将tr中的td替换为th)，th默认加粗且在单元格居中显示。</span><br></pre></td></tr></table></figure><p>【table的常用属性】<br>1-border：表格边框属性；当使用border=”1”设置边框时，会在所有td以及table上嵌套边框，当border加大时，只有table框会加粗。<br>2-cellspacing：单元格与单元格之间的间隙。当cellspacing=”0”时，单元格之间的间隙为0，但边框线并不会合并。<br>☆☆合并边框的写法style=”border-collapse:collapse;” 使用边框合并时，无需设置cellspacing。<br>3-cellpadding:单元格内边距，单元格中文字与单元格边框之间的距离。<br>4-width/height:表格的宽高<br>5-align：设置表格在父容器中的对齐方式 ，left/居左 center/居中 right/居右<br>☆☆当表格使用align属性时，相当于使表格浮动，可能会导致表格后面的元素受表格浮动影响，导致布局错乱。<br>6-bgcolor：背景色<br>7-background：背景图，后接相对路径。背景图和背景色同时生效时，图会覆盖背景色<br>8-bordercolor：设置边框颜色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标签的属性<br>当表格属性与行列属性冲突时，以行列属性为优先，属性设置优先级td&gt;tr&gt;table。<br>1-width,height:给单个的行列设置宽高<br>2-bgcolor:背景色<br>3-align：设置单元格中的文字，在单元格中的水平对齐方式 left/center/right<br>4-valign:设置单元格中文字在格中的垂直对齐方式 top/center/bottom<br>5-nowrap:nowrap=”nowrap”设置单元格文字行末不断行</p><p>【表格的跨行与跨列】<br>1-跨列：colspan，某单元格跨N列，则该单元格右边的N-1个td就不需要了。<br>2-跨行：rowspan，某单元格跨N行，则该单元格下边的N-1个td就不需要了。</p><p>5.表单标签<br>【form两个重要属性】<br>action：表单需要提交的服务器地址<br>method：表单提交数据使用的方法，get/post<br>get和post的区别<br>① get传参使用URL传递，所有参数在地址栏可见，不安全；get传参数据量有限。<br>② post传参使用http请求传递，比较安全；post可以传递大量数据。<br>但是，get请求的传输速率比post快。</p><p>URL传参的形式：链接URL地址?name1=value1&amp;name2=value2</p><p>【input的常用属性】<br>① type：设置input的输入类型<br>② name：给input输入框命名。一般情况下，name属性必不可少。因为，传递数据时，使用name=value（输入内容）的形式传递。<br>③ value：input输入框的默认值<br>④ placeholder：输入框的提示内容。当input有默认的value或输入值时，placeholder消失</p><p>【input-type属性的常用属性值】<br>① text：文本输入框<br>② password：密码输入框，输入内容默认显示小黑点<br>③ radio：单选框 checkbox：复选框<br>使用radio/checkbox时，value属性必填。提交时，提交的为value中的默认值；<br>radio/checkbox凭借name属性，确定是否属于同一组，name相同为同组，只能选一个<br>使用checked=”checked”属性，设置默认选中项<br>④ file：文件上传<br>使用accept=”类型”，设置只能上传的文件类型，如 accept=image/* 表示任意格式图片<br>⑤ submit：提交按钮，将所有表单数据提交至后台服务器<br>⑥ reset： 重置表单数据<br>⑦ image：图形提交按钮，跟submit一样，具有表单提交功能<br>使用src属性确定图片路径<br>⑧ button：普通按钮，没有屌用</p><p>【属性名=属性值的情况】<br>① checked=”checked” 设置radio<br>② multiple=”multiple” 设置select控件为多选，可在界面使用Ctrl+鼠标，进行多选。一般不用。<br>③ selected=”selected” 设置select控件，默认选中的option选项<br>④ readonly=”readonly”<br>⑤ disabled=”disabled”<br>当input被disabled时，该input的name和value数据将无法向后台传送<br>⑥ hidden=”hidden” 隐藏控件。等效于</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hiden&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>⑦ nowrap=nowrap</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">【下拉选择控件 select】</span><br><span class="line">① 写法：<span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span>option可以有N多个</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">② name属性，应该写在<span class="tag">&lt;<span class="name">select</span>&gt;</span>上，所有选项只有一个name</span><br><span class="line">③ multiple=&quot;multiple&quot; 设置select控件为多选，可在界面使用Ctrl+鼠标，进行多选。一般 不用。</span><br><span class="line">④ option常用属性：</span><br><span class="line">value=&quot;&quot;:当option没有value属性时，往后台传递的是<span class="tag">&lt;<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span>标签中的文字；</span><br><span class="line">当option有value属性时，往后台传递的是value属性的值。</span><br><span class="line">title=&quot;&quot;:鼠标指上后显示的文字。</span><br><span class="line">selected=&quot;selected&quot;:默认选中。</span><br><span class="line">⑤ <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;山东省&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span> :用于将option标签进行分组，label属性表示分组名。</span><br><span class="line"> </span><br><span class="line">【文本域 textarea】</span><br><span class="line">① 写法：<span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">② 设置宽高style=&quot;width: 200px; height: 150px;&quot; 自身有cols=&quot;&quot; rows=&quot;&quot;两个属性，但不常用</span><br><span class="line">③ readonly=&quot;readonly&quot; 设置为只读模式，不允许编辑。</span><br><span class="line">④ style=&quot;resize: none;&quot; 设置为宽高不允许修改。</span><br><span class="line">⑤ style=&quot;overflow: ;&quot; 设置当文字超出区域时，如何处理。</span><br><span class="line">也可以通过overflow-x/overflow-y分别设置水平垂直方向的显示方式。</span><br><span class="line">常用属性值:hidden 超出区域的文字，隐藏无法显示</span><br><span class="line">scroll 无论文字多少，均会显示滚动</span><br><span class="line">auto 自动，根据文字多少自动决定是否显示滚动条（默认样式）</span><br></pre></td></tr></table></figure><p>【表格的边框与标题】</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span> 表格的边框</span><br><span class="line"><span class="tag">&lt;<span class="name">legend</span>&gt;</span>边框标题<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">...若干个表单元素</span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML简介</title>
      <link href="/2019/03/16/HTML%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/03/16/HTML%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是W3C"><a href="#什么是W3C" class="headerlink" title="什么是W3C"></a>什么是W3C</h1><p>万维网联盟（World Wide Web Consortium，W3C），又称W3C理事会，是万维网的主要国际标准组织。为半自治非政府组织（quasi-autonomous non-governmental organisation）。</p><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>万维网联盟（W3C）由蒂姆·伯纳斯-李于1994年10月离开欧洲核子研究中心（CERN）后成立，在欧盟执委会和国防高等研究计划署（DARPA）的支持下成立于麻省理工学院MIT计算机科学与人工智能实验室（MIT／LCS），DARPA曾率先推出了互联网及其前身ARPANET。</p><p>该组织试图透过W3C制定的新标准来促进业界成员间的兼容性和协议。不兼容的HTML版本由不同的供应商提供，导致网页显示方式不一致。联盟试图让所有的供应商实施一套由联盟选择的核心原则和组件。</p><p>CERN最初打算做为W3C的欧洲分支机构，然而CERN希望把重点放在粒子物理而不是信息技术上。1995年4月，法国国家信息与自动化研究所（INRIA）成为W3C的欧洲机构。1996年9月，庆应义塾大学SFC研究所成为W3C亚洲机构。从1997年开始，W3C在世界各地创建了区域办事处。截至2009年9月，已有十八个区域办事处，涵盖澳大利亚、比荷卢联盟、巴西、中国、芬兰、德国、奥地利、希腊、香港、匈牙利、印度、以色列、意大利、韩国、摩洛哥、南非、西班牙、瑞典。2013年1月，北京航空航天大学成为W3C中国机构。2016年，W3C在英国和爱尔兰创建了区域办事处。</p><h2 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h2><p>为解决网络应用中不同平台、技术和开发者带来的不兼容问题，保障网络信息的顺利和完整流通，万维网联盟制定了一系列标准并督促网络应用开发者和内容提供者遵循这些标准。标准的内容包括使用语言的规范，开发中使用的导则和解释引擎的行为等等。W3C也制定了包括XML和CSS等的众多影响深远的标准规范。</p><p>但是，W3C制定的网络标准似乎并非强制，而只是推荐标准。因此部分网站仍然不能完全实现这些标准，特别是使用早期所见即所得网页编辑软件设计的网页往往会包含大量非标准代码。</p><h1 id="什么是MDN"><a href="#什么是MDN" class="headerlink" title="什么是MDN"></a>什么是MDN</h1><p>MDN Web Docs（旧称Mozilla Developer Network、Mozilla Developer Center，简称MDN）是一个汇集众多Mozilla基金会产品和网络技术开发文档的免费网站。</p><h2 id="MDN历史"><a href="#MDN历史" class="headerlink" title="MDN历史"></a>MDN历史</h2><p>该项目始于2005年，最初由Mozilla公司员工Deb Richardson领导。自2006年以来，文档工作由Eric Shepherd领导。</p><p>网站最初的内容是由DevEdge提供，但在AOL收购Netscape后，DevEdge网站也宣布关闭。为此Mozilla基金会向AOL获取了DevEdge发布的内容，同时将DevEdge内容搬移到mozilla.org。</p><p>MDN本身有一个论坛，并在Mozilla IRC网络上有一个IRC频道#mdn。MDN由Mozilla公司提供服务器和员工的资助。</p><p>2016年10月3日发表的Brave网页浏览器将MDN作为其搜索引擎选项之一。</p><h1 id="HTML标签列表"><a href="#HTML标签列表" class="headerlink" title="HTML标签列表"></a>HTML标签列表</h1><h2 id="根元素节"><a href="#根元素节" class="headerlink" title="根元素节"></a>根元素节</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>代表 HTML 或 XHTML 文档的根。其他所有元素必须是这个元素的子节点。</span><br></pre></td></tr></table></figure><h2 id="文档元数据节"><a href="#文档元数据节" class="headerlink" title="文档元数据节"></a>文档元数据节</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>代表关于文档元数据的一个集合，包括脚本或样式表的链接或内容。</span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>定义文档的标题，将显示在浏览器的标题栏或标签页上。该元素只能包含文本，包含的标签不会被解释。</span><br><span class="line"><span class="tag">&lt;<span class="name">base</span>&gt;</span>定义页面上相对 URL 的基准 URL。</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span>&gt;</span>用于链接外部的 CSS 到该文档。</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span>&gt;</span>定义其他 HTML 元素无法描述的元数据。</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span>用于内联 CSS。</span><br></pre></td></tr></table></figure><h2 id="脚本节"><a href="#脚本节" class="headerlink" title="脚本节"></a>脚本节</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml">    定义一个内联脚本或链接到外部脚本。脚本语言是 JavaScript。</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span>  定义当浏览器不支持脚本时显示的替代文字。</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="tag">&lt;<span class="name">template</span>&gt;</span>  这个元素在 HTML5 中加入通过 JavaScript 在运行时实例化内容的容器。</span></span></span><br></pre></td></tr></table></figure><h2 id="章节节"><a href="#章节节" class="headerlink" title="章节节"></a>章节节</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>代表 HTML文档的内容。在文档中只能有一个 <span class="tag">&lt;<span class="name">body</span>&gt;</span> 元素。</span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span> 这个元素在 HTML5 中加入定义文档中的一个章节。</span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span> 这个元素在 HTML5 中加入定义只包含导航链接的章节。</span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span> 这个元素在 HTML5 中加入定义可以独立于内容其余部分的完整独立内容块。</span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span> 这个元素在 HTML5 中加入定义和页面内容关联度较低的内容——如果被删除，剩下的内容仍然很合理。</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>,<span class="tag">&lt;<span class="name">h2</span>&gt;</span>,<span class="tag">&lt;<span class="name">h3</span>&gt;</span>,<span class="tag">&lt;<span class="name">h4</span>&gt;</span>,<span class="tag">&lt;<span class="name">h5</span>&gt;</span>,<span class="tag">&lt;<span class="name">h6</span>&gt;</span>标题元素实现了六层文档标题，<span class="tag">&lt;<span class="name">h1</span>&gt;</span> 是最大的标题，<span class="tag">&lt;<span class="name">h6</span>&gt;</span> 是最小的标题。标题元素简要地描述章节的主题。</span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span> 这个元素在 HTML5 中加入定义页面或章节的头部。它经常包含 logo、页面标题和导航性的目录。</span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span> 这个元素在 HTML5 中加入定义页面或章节的尾部。它经常包含版权信息、法律信息链接和反馈建议用的地址。</span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span>定义包含联系信息的一个章节。</span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span>这个元素在 HTML5 中加入定义文档中主要或重要的内容。</span><br></pre></td></tr></table></figure><h2 id="组织内容节"><a href="#组织内容节" class="headerlink" title="组织内容节"></a>组织内容节</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>定义一个段落。</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span>代表章节、文章或其他长内容中段落之间的分隔符。</span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>代表其内容已经预先排版过，格式应当保留 。</span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>代表引用自其他来源的内容。</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span>定义一个有序列表。</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>定义一个无序列表。</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>定义列表中的一个列表项。</span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span>定义一个定义列表（一系列术语和其定义）。</span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>代表一个由下一个 <span class="tag">&lt;<span class="name">dd</span>&gt;</span> 定义的术语。</span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>代表出现在它之前术语的定义。</span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span> 这个元素在 HTML5 中加入代表一个和文档有关的图例。</span><br><span class="line"><span class="tag">&lt;<span class="name">figcaption</span>&gt;</span> 这个元素在 HTML5 中加入代表一个图例的说明。</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>代表一个通用的容器，没有特殊含义。</span><br></pre></td></tr></table></figure><h2 id="文字形式节"><a href="#文字形式节" class="headerlink" title="文字形式节"></a>文字形式节</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>代表一个链接到其他资源的超链接 。</span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>代表强调 文字。</span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>代表特别重要 文字。</span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>代表注释 ，如免责声明、版权声明等，对理解文档不重要。</span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>代表不准确或不相关 的内容。</span><br><span class="line"><span class="tag">&lt;<span class="name">cite</span>&gt;</span>代表作品标题 。</span><br><span class="line"><span class="tag">&lt;<span class="name">q</span>&gt;</span>代表内联的引用 。</span><br><span class="line"><span class="tag">&lt;<span class="name">dfn</span>&gt;</span>代表一个术语包含在其最近祖先内容中的定义 。</span><br><span class="line"><span class="tag">&lt;<span class="name">abbr</span>&gt;</span>代表省略 或缩写 ，其完整内容在 title 属性中。</span><br><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span> 这个元素在 HTML5 中加入关联一个内容的机器可读的等价形式 （该元素只在 WHATWG 版本的 HTML 标准中，不在 W3C 版本的 HTML5 标准中）。</span><br><span class="line"><span class="tag">&lt;<span class="name">time</span>&gt;</span> 这个元素在 HTML5 中加入代表日期 和时间 值；机器可读的等价形式通过 datetime 属性指定。</span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>代表计算机代码 。</span><br><span class="line"><span class="tag">&lt;<span class="name">var</span>&gt;</span>代表代码中的变量 。</span><br><span class="line"><span class="tag">&lt;<span class="name">samp</span>&gt;</span>代表程序或电脑的输出 。</span><br><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>代表用户输入 ，一般从键盘输出，但也可以代表其他输入，如语音输入。</span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>,<span class="tag">&lt;<span class="name">sup</span>&gt;</span>分别代表下标 和上标 。</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>代表一段不同性质 的文字，如技术术语、外文短语等。</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>代表一段需要被关注 的文字。</span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>代表一段需要下划线呈现的文本注释，如标记出拼写错误的文字等。</span><br><span class="line"><span class="tag">&lt;<span class="name">mark</span>&gt;</span> 这个元素在 HTML5 中加入代表一段需要被高亮的引用 文字。</span><br><span class="line"><span class="tag">&lt;<span class="name">ruby</span>&gt;</span> 这个元素在 HTML5 中加入代表被ruby 注释 标记的文本，如中文汉字和它的拼音。</span><br><span class="line"><span class="tag">&lt;<span class="name">rt</span>&gt;</span> 这个元素在 HTML5 中加入代表ruby 注释 ，如中文拼音。</span><br><span class="line"><span class="tag">&lt;<span class="name">rp</span>&gt;</span> 这个元素在 HTML5 中加入代表 ruby 注释两边的额外插入文本 ，用于在不支持 ruby 注释显示的浏览器中提供友好的注释显示。</span><br><span class="line"><span class="tag">&lt;<span class="name">bdi</span>&gt;</span> 这个元素在 HTML5 中加入代表需要脱离 父元素文本方向的一段文本。它允许嵌入一段不同或未知文本方向格式的文本。</span><br><span class="line"><span class="tag">&lt;<span class="name">bdo</span>&gt;</span>指定子元素的文本方向 ，显式地覆盖默认的文本方向。</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>代表一段没有特殊含义的文本，当其他语义元素都不适合文本时候可以使用该元素。</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>代表换行 。</span><br><span class="line"><span class="tag">&lt;<span class="name">wbr</span>&gt;</span> 这个元素在 HTML5 中加入代表建议换行 (Word Break Opportunity) ，当文本太长需要换行时将会在此处添加换行符。</span><br></pre></td></tr></table></figure><h2 id="编辑节"><a href="#编辑节" class="headerlink" title="编辑节"></a>编辑节</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>定义增加 到文档的内容。</span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>定义从文档移除 的内容。</span><br></pre></td></tr></table></figure><h2 id="嵌入内容节"><a href="#嵌入内容节" class="headerlink" title="嵌入内容节"></a>嵌入内容节</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span>代表一张图片 。</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span>&gt;</span>代表一个内联的框架 。</span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span>&gt;</span> 这个元素在 HTML5 中加入代表一个嵌入 的外部资源，如应用程序或交互内容。</span><br><span class="line"><span class="tag">&lt;<span class="name">object</span>&gt;</span>代表一个外部资源 ，如图片、HTML 子文档、插件等。</span><br><span class="line"><span class="tag">&lt;<span class="name">param</span>&gt;</span>代表 <span class="tag">&lt;<span class="name">object</span>&gt;</span> 元素所指定的插件的参数 。</span><br><span class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span> 这个元素在 HTML5 中加入代表一段视频 及其视频文件和字幕，并提供了播放视频的用户界面。</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span>&gt;</span> 这个元素在 HTML5 中加入代表一段声音 ，或音频流 。</span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span> 这个元素在 HTML5 中加入为 <span class="tag">&lt;<span class="name">video</span>&gt;</span> 或 <span class="tag">&lt;<span class="name">audio</span>&gt;</span> 这类媒体元素指定媒体源 。</span><br><span class="line"><span class="tag">&lt;<span class="name">track</span>&gt;</span> 这个元素在 HTML5 中加入为 <span class="tag">&lt;<span class="name">video</span>&gt;</span> 或 <span class="tag">&lt;<span class="name">audio</span>&gt;</span> 这类媒体元素指定文本轨道（字幕） 。</span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span>&gt;</span> 这个元素在 HTML5 中加入代表位图区域 ，可以通过脚本在它上面实时呈现图形，如图表、游戏绘图等。</span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span>与 <span class="tag">&lt;<span class="name">area</span>&gt;</span> 元素共同定义图像映射 区域。</span><br><span class="line"><span class="tag">&lt;<span class="name">area</span>&gt;</span>与 <span class="tag">&lt;<span class="name">map</span>&gt;</span> 元素共同定义图像映射 区域。</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span> 这个元素在 HTML5 中加入定义一个嵌入式矢量图 。</span><br><span class="line"><span class="tag">&lt;<span class="name">math</span>&gt;</span> 这个元素在 HTML5 中加入定义一段数学公式 。</span><br></pre></td></tr></table></figure><h2 id="表格节"><a href="#表格节" class="headerlink" title="表格节"></a>表格节</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span>定义多维数据 。</span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span>&gt;</span>代表表格的标题 。</span><br><span class="line"><span class="tag">&lt;<span class="name">colgroup</span>&gt;</span>代表表格中一组单列或多列 。</span><br><span class="line"><span class="tag">&lt;<span class="name">col</span>&gt;</span>代表表格中的列 。</span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span>代表表格中一块具体数据 （表格主体）。</span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span>代表表格中一块列标签 （表头）。</span><br><span class="line"><span class="tag">&lt;<span class="name">tfoot</span>&gt;</span>代表表格中一块列摘要 （表尾）。</span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span>代表表格中的行 。</span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>代表表格中的单元格 。</span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>代表表格中的头部单元格 。</span><br></pre></td></tr></table></figure><h2 id="表单节"><a href="#表单节" class="headerlink" title="表单节"></a>表单节</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span>代表一个表单 ，由控件组成。</span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span>代表控件组 。</span><br><span class="line"><span class="tag">&lt;<span class="name">legend</span>&gt;</span>代表 <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span> 控件组的标题 。</span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>代表表单控件的标题 。</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span>代表允许用户编辑数据的数据区 （文本框、单选框、复选框等）。</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>代表按钮 。</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span>代表下拉框 。</span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span>&gt;</span> 这个元素在 HTML5 中加入代表提供给其他控件的一组预定义选项 。</span><br><span class="line"><span class="tag">&lt;<span class="name">optgroup</span>&gt;</span>代表一个选项分组 。</span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>代表一个 <span class="tag">&lt;<span class="name">select</span>&gt;</span> 元素或 <span class="tag">&lt;<span class="name">datalist</span>&gt;</span> 元素中的一个选项</span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span>代表多行文本框 。</span><br><span class="line"><span class="tag">&lt;<span class="name">keygen</span>&gt;</span> 这个元素在 HTML5 中加入代表一个密钥对生成器 控件。</span><br><span class="line"><span class="tag">&lt;<span class="name">output</span>&gt;</span> 这个元素在 HTML5 中加入代表计算值 。</span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span>&gt;</span> 这个元素在 HTML5 中加入代表进度条 。</span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span>&gt;</span> 这个元素在 HTML5 中加入代表滑动条 。</span><br></pre></td></tr></table></figure><h2 id="交互元素节"><a href="#交互元素节" class="headerlink" title="交互元素节"></a>交互元素节</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span> 这个元素在 HTML5 中加入代表一个用户可以(点击)获取额外信息或控件的小部件 。</span><br><span class="line"><span class="tag">&lt;<span class="name">summary</span>&gt;</span> 这个元素在 HTML5 中加入代表 <span class="tag">&lt;<span class="name">details</span>&gt;</span> 元素的综述 或标题 。</span><br><span class="line"><span class="tag">&lt;<span class="name">menuitem</span>&gt;</span> 这个元素在 HTML5 中加入代表一个用户可以点击的菜单项。</span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span>&gt;</span> 这个元素在 HTML5 中加入代表菜单。</span><br></pre></td></tr></table></figure><h1 id="什么是空标签"><a href="#什么是空标签" class="headerlink" title="什么是空标签"></a>什么是空标签</h1><p>没有闭合标签的标签被称作为空标签。<br>在我们使用的标签中，有的具有闭合标签。例如<code>&lt;td&gt;</code>标签，它有闭合标签<code>&lt;/td&gt;</code>。但是也有一部分标签没有闭合标签，例如<code>&lt;br /&gt;</code>标签，这一类标签我们称之为空标签。</p><h2 id="常见的空标签有哪些"><a href="#常见的空标签有哪些" class="headerlink" title="常见的空标签有哪些"></a>常见的空标签有哪些</h2><pre class="hljs xml"><code class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> /&gt;</span>  用于为基于Web的表单创建交互式控件，以便接受来自用户的数据。<span class="hljs-tag">&lt;<span class="hljs-name">img</span> /&gt;</span> 代表文档中的一个图像。<span class="hljs-tag">&lt;<span class="hljs-name">isindex</span> /&gt;</span> 使浏览器显示一个对话框，提示用户输入单行文本。<span class="hljs-tag">&lt;<span class="hljs-name">area</span> /&gt;</span> 在图片上定义一个热点区域<span class="hljs-tag">&lt;<span class="hljs-name">base</span> /&gt;</span> 指定用于一个文档中包含的所有相对URL的基本URL。<span class="hljs-tag">&lt;<span class="hljs-name">basefont</span> /&gt;</span> 用来设置文档的默认字体大小。（目前已废弃 ）<span class="hljs-tag">&lt;<span class="hljs-name">bgsound</span> /&gt;</span> IE浏览器中设置网页背景音乐的元素。<span class="hljs-tag">&lt;<span class="hljs-name">col</span> /&gt;</span> 定义表格中的列，并用于定义所有公共单元格上的公共语义。它通常位于`<span class="hljs-tag">&lt;<span class="hljs-name">colgroup</span>&gt;</span>`元素内。<span class="hljs-tag">&lt;<span class="hljs-name">embed</span> /&gt;</span> 用于表示一个外部应用或交互式内容的集合点，换句话说，就是一个插件。 <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> /&gt;</span> ，它定义了一个特定区域，另一个 HTML 文档可以在里面展示。(已废弃)<span class="hljs-tag">&lt;<span class="hljs-name">keygen</span> /&gt;</span>  为了方便生成密钥材料和提交作为 [HTML form]的一部分的公钥.这种机制被用于设计基于 Web 的证书管理系统。(已废弃)<span class="hljs-tag">&lt;<span class="hljs-name">link</span> /&gt;</span> 指定了外部资源与当前文档的关系. 这个元素的使用方法包括为导航定义关系框架.这个元素经常用来链接css文件。<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> /&gt;</span> 元素表示那些不能由其它HTML元相关元素 (<span class="hljs-tag">&lt;<span class="hljs-name">base</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">link</span>&gt;</span>, <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="handlebars"><span class="xml">,          <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="xml"> 或 <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>) 之一表示的任何元数据信息.<span class="hljs-tag">&lt;<span class="hljs-name">nextid</span> /&gt;</span>  是一个过时的 HTML 元素, 它使下一个 web 设计工具能够为其定位点生成自动名称标签。            它是由该 web 编辑工具自动生成的, 不需要手动调整或输入。这个元素的区别是成为第一个元素, 成为一个 "丢失的标签" 被淘汰的官方公共 DTD 的 HTML 版本。<span class="hljs-tag">&lt;<span class="hljs-name">param</span> /&gt;</span>  定义了 <span class="hljs-tag">&lt;<span class="hljs-name">object</span>&gt;</span>的参数<span class="hljs-tag">&lt;<span class="hljs-name">plaintext</span> /&gt;</span> 将起始标签后面的任何东西渲染为纯文本，不会解释为 HTML。它没有闭合标签，因为任何后面的东西都会看做纯文本。(已废弃)<span class="hljs-tag">&lt;<span class="hljs-name">spacer</span> /&gt;</span> 它可以向页面插入间隔。它由 Netscape 设计，用于实现单像素布局图像的相同效果，Web 设计师用它来向页面添加空白，而不需要实际使用图片。（已废弃）<span class="hljs-tag">&lt;<span class="hljs-name">wbr</span> /&gt;</span> 一个文本中的位置，其中浏览器可以选择来换行，虽然它的换行规则可能不会在这里换行。</span></span></span></code></pre><h1 id="什么是可替换标签"><a href="#什么是可替换标签" class="headerlink" title="什么是可替换标签"></a>什么是可替换标签</h1><p>在 CSS 中，可替换元素（replaced element）的展现效果不是由 CSS 来控制的。这些元素是一种外部对象，它们外观的渲染，是独立于 CSS 的。</p><p>简单来说，它们的内容不受当前文档的样式的影响。CSS 可以影响可替换元素的位置，但不会影响到可替换元素自身的内容。某些可替换元素，例如<code>&lt;iframe&gt;</code>元素，可能具有自己的样式表，但它们不会继承父文档的样式。</p><p>CSS 能对可替换元素产生的唯一影响在于，部分属性支持控制元素内容在其框中的位置或定位方式。有关详细信息，请参阅本文下面的控制内容框中的对象位置。</p><h2 id="可替换标签"><a href="#可替换标签" class="headerlink" title="可替换标签"></a>可替换标签</h2><p>典型的可替换元素有：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有些元素仅在特定情况下被作为可替换元素处理，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">applet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HTML 规范也说了 <code>&lt;input&gt;</code> 元素可替换，因为 “image” 类型的 <code>&lt;input&gt;</code>元素就像<code>&lt;img&gt;</code>一样被替换。但是其他形式的控制元素，包括其他类型的 <code>&lt;input&gt; </code>元素，被明确地列为非可替换元素（non-replaced elements）。该规范用术语小挂件（Widgets）来描述它们默认的限定平台的渲染行为。</p><p>用 CSS content 属性插入的对象是匿名的可替换元素。它们并不存在于 HTML 标记中，因此是“匿名的”。</p><h2 id="CSS与可替换标签"><a href="#CSS与可替换标签" class="headerlink" title="CSS与可替换标签"></a>CSS与可替换标签</h2><p>CSS 在某些情况下会对可替换元素做一些特殊处理，比如计算外边距（margin）和一些 auto 的具体值。</p><p>需要注意的是，一部分（并非全部）可替换元素，其本身具有的尺寸和基线（baseline）会被一些 CSS 属性用到，加入计算之中，例如 vertical-align。会只有可替换元素才能具有这种自带值。</p><p>控制内容框中的对象位置节<br>某些CSS属性可用于指定被替换元素中包含的对象应如何定位在元素的框区域中。这些由CSS图像模块第3级和CSS图像模块第4级规范定义:</p><p>object-fit<br>指定应如何将替换后的元素的内容对象安装到包含元素的框中。</p><p>对象的位置<br>指定被替换元素的内容对象在元素框中的对齐方式。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于HTTP的请求与相应</title>
      <link href="/2019/03/15/%E5%85%B3%E4%BA%8EHTTP%E7%9A%84%E8%AF%B7%E6%B1%82%E4%B8%8E%E7%9B%B8%E5%BA%94/"/>
      <url>/2019/03/15/%E5%85%B3%E4%BA%8EHTTP%E7%9A%84%E8%AF%B7%E6%B1%82%E4%B8%8E%E7%9B%B8%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP请求的格式"><a href="#HTTP请求的格式" class="headerlink" title="HTTP请求的格式"></a>HTTP请求的格式</h1><p>1 动词 路径 协议/版本<br>2 Key1: value1<br>2 Content-Type: application/x-www-form-urlencoded<br>2 Host: <a href="http://www.baidu.com/">www.baidu.com</a><br>2 User-Agent: curl/7.54.0<br>3<br>4 要上传的数据<br>请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空）<br>第三部分永远都是一个回车（\n）</p><p>当浏览器向Web服务器发出请求时，它向服务器传递了一个数据块，也就是请求信息，HTTP请求信息由3部分组成：（1）请求方法URI协议/版本（2）　请求头(Request Header)（3）　请求正文<br>（1）请求方法URI协议/版本<br>请求的第一行是“方法URI协议/版本”例如：GET/sample.jsp HTTP/1.1<br>以上代码中“GET”代表请求方法，“/sample.jsp”表示URI，“HTTP/1.1代表协议和协议的版本。<br>（2）请求头(Request Header)<br>请求头包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用的语言，请求正文的长度等。例如：<br>Accept:image/gif.image/jpeg.<em>/</em><br>Accept-Language:zh-cn<br>Connection:Keep-Alive<br>Host:localhost<br>User-Agent:Mozila/4.0(compatible:MSIE5.01:Windows NT5.0)<br>Accept-Encoding:gzip,deflate.<br>（3）请求正文<br>请求头和请求正文之间是一个空行，这个行非常重要，它表示请求头已经结束，接下来的是请求正文。请求正文中可以包含客户提交的查询字符串信息：<br>username=jinqiao&amp;password=1234</p><h2 id="用Chrome查看请求"><a href="#用Chrome查看请求" class="headerlink" title="用Chrome查看请求"></a>用Chrome查看请求</h2><p>1.打开检查，进入Network<br>2.在地址栏输入网址<br>3.在 Network 点击，查看 request，点击「view source」<br>4.如果有请求的第四部分，那么在 FormData 或 Payload 里面可以看到</p><h1 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h1><p>请求了之后，应该都能得到一个响应，除非断网了，或者服务器宕机了。</p><p>1.GET 请求和 POST 请求对应的响应可以一样，也可以不一样<br>2.响应的第四部分可以很长很长很长</p><h2 id="响应的格式"><a href="#响应的格式" class="headerlink" title="响应的格式"></a>响应的格式</h2><p>1 协议/版本号 状态码 状态解释<br>2 Key1: value1<br>2 Key2: value2<br>2 Content-Length: 17931<br>2 Content-Type: text/html<br>3<br>4 要下载的内容</p><h2 id="用Chrome查看响应"><a href="#用Chrome查看响应" class="headerlink" title="用Chrome查看响应"></a>用Chrome查看响应</h2><p>1.打开 Network<br>2.输入网址<br>3.选中第一个响应<br>4.查看 Response Headers，点击「view source」，点击「view source」，点击「view source」<br>5.你会看到响应的前两部分<br>6.查看 Response 或者 Preview，你会看到响应的第 4 部分</p><h1 id="使用-curl-命令"><a href="#使用-curl-命令" class="headerlink" title="使用 curl 命令"></a>使用 curl 命令</h1><p>进入命令行界面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s -v -H <span class="string">&quot;Frank: xxx&quot;</span> -- <span class="string">&quot;https://www.baidu.com&quot;</span></span><br></pre></td></tr></table></figure><p>以上是用Git Bash查看请求与响应的命令<br>会得到相关内容</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
